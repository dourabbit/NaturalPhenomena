/*jslint evil:true */
/**
 * Dynamic thread loader
 *
 * 
 * 
 * 
 * 
 * 
*/

// 
var DISQUS;
if (!DISQUS || typeof DISQUS == 'function') {
    throw "DISQUS object is not initialized";
}
// 

// json_data and default_json django template variables will close
// and re-open javascript comment tags

(function () {
    var jsonData, cookieMessages, session, key;

    /* */ jsonData = {"reactions": [], "reactions_limit": 10, "ordered_highlighted": [], "posts": {"76181514": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "subObj: {\n\nsubpty1 : parentObj.pty \n}", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-08_17:29:57", "date": "1 year ago", "message": "subObj: {<br><br>subpty1 : parentObj.pty <br>}", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 72302200, "depth": 2, "points": 0, "user_key": "a4934482eb207333529f970f8209524c", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "65964563": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "var parentObj= {\n\n         pty1 : 1, \n\n         subObj: {\n\n                       subpty1 : ''       /*How can I reference the super myObj's propety 'pty'  at here ?  */\n         }\n};", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-08-03_23:06:05", "date": "1 year ago", "message": "var parentObj= {<br><br>         pty1 : 1, <br><br>         subObj: {<br><br>                       subpty1 : ''       /*How can I reference the super myObj's propety 'pty'  at here ?  */<br>         }<br>};", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 6, "user_voted": null, "num_replies": 3, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 6, "user_key": "da92b40656aa363cdf77e74797eef0ef", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "20018197": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "In your defining a subclass example, the diagram shows x twice first time directly under the object and second time under the prototype object. The values are also different (2 & 1). I think x should appear only once under the prototype object. Please correct me if I am wrong. ", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-10-14_01:57:43", "date": "2 years ago", "message": "In your defining a subclass example, the diagram shows x twice first time directly under the object and second time under the prototype object. The values are also different (2 &amp; 1). I think x should appear only once under the prototype object. Please correct me if I am wrong.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "58be7bd668115bd8bf70dc54f2a7f8b5", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "252583450": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "wonderful article.\u00a0 ", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-07-15_01:56:39", "date": "4 months ago", "message": "wonderful article.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "d9204accfc4925409862ff3ab98ce6b1", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "134619163": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Thanks Mike, and I really appreciate the article. I'm moving into a more JavaScript-centric tech stack next week for a new consulting gig, and I'm re-booting my JavaScript chops this week. I'm currently tabbing back-and-forth from this and jconsole.com to get the concepts solidly under my fingers. Much appreciated!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-01-25_22:24:56", "date": "9 months ago", "message": "Thanks Mike, and I really appreciate the article. I'm moving into a more JavaScript-centric tech stack next week for a new consulting gig, and I'm re-booting my JavaScript chops this week. I'm currently tabbing back-and-forth from this and <a href=\"http://jconsole.com\" rel=\"nofollow\">jconsole.com</a> to get the concepts solidly under my fingers. Much appreciated!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": {"username": "mckoss", "avatar_url": "http://media.disqus.com/uploads/users/4/3100/avatar32.jpg", "display_name": "mckoss"}, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 134426445, "depth": 5, "points": 1, "user_key": "5756f9ea3fa0d1df985d7e2d4b83fa8a", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "100864035": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I think I mispoke.  There will only be one copy of the function code.  But\r\nthere must be a separate closure (per instance) for each function shared as\r\na \"private function\".  Unless the information hiding is essential to your\r\napplication, it will be more efficient to place all your methods in the\r\nconstructor function's prototype object.  In this way, the per-instance\r\nstorage is optimized to share the functions common to all instances of your\r\nclass.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-22_16:46:22", "date": "12 months ago", "message": "I think I mispoke.  There will only be one copy of the function code.  But\n<br>there must be a separate closure (per instance) for each function shared as\n<br>a \"private function\".  Unless the information hiding is essential to your\n<br>application, it will be more efficient to place all your methods in the\n<br>constructor function's prototype object.  In this way, the per-instance\n<br>storage is optimized to share the functions common to all instances of your\n<br>class.", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 100252551, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "264690218": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I have mentioned your page at my FB page: https://www.facebook.com/satyaweblog", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-07-26_01:24:13", "date": "3 months ago", "message": "I have mentioned your page at my FB page: <a href=\"https://www.facebook.com/satyaweblog\" rel=\"nofollow\">https://www.facebook.com/satya...</a>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "satya61229", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "214728544": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "so\u00a0 this.PARENT_PARENTFUNCTION();\u00a0 is going to run the parent function? ", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-05-31_08:01:33", "date": "5 months ago", "message": "so\u00a0 this.PARENT_PARENTFUNCTION();\u00a0 is going to run the parent function?", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "Keysle", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "80924745": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I would say that one definition is more general.  Polymorphism does just mean having more than one physical implementation of something that share the same name, interface (or automatic way to handle variations in arguments) and conceptual functionality.\n\nIt has no benefit on its own; its power is unleashed by application code is written to call the method without regard to what specific class instance it's calling.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-25_22:43:20", "date": "1 year ago", "message": "I would say that one definition is more general.  Polymorphism does just mean having more than one physical implementation of something that share the same name, interface (or automatic way to handle variations in arguments) and conceptual functionality.<br><br>It has no benefit on its own; its power is unleashed by application code is written to call the method without regard to what specific class instance it's calling.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 14433722, "depth": 3, "points": 0, "user_key": "f5d5d2174187df8ca5d1b4d1a70f8f7f", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "252792908": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Phenomenal help. Thank you", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-07-15_11:28:43", "date": "4 months ago", "message": "Phenomenal help. Thank you", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "google-091e31eb3b2f427dbbb262c1cd43c4f7", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "124172898": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Mike, thank you for great article! I found it very easy to read and understand.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-01-04_22:29:41", "date": "10 months ago", "message": "Mike, thank you for great article! I found it very easy to read and understand.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "twitter-125809736", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "12261455": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": "2 years ago", "dislikes": 0, "raw_message": "In a strongly typed language, the only way to achieve polymorphism is to derive different implementations from the same base class.  This is to avoid the sort of accidental name-collision that you describe.  Also note that in modern languages, a polymorphic object need not derive from an actual base class, but can simply declare that it implements a particular \"abstract interface\".\n\nBut the underlying concept of polymorphism more basically, getting two different \"types\" of objects to behave the same in some respect.  In dynamic languages, like Javascript (and Python), this is acheived via \"Duck Typing\" (if it walks like a duck, quacks like a duck, .... it's a duck).  The \"contract\" is simply a collection of methods that each of the objects supports that are sufficient for some piece of code to interact with them.  Note that there need not be a formal base class or abstract interface defined for this to occur.  Simply by implmenting methods, A, B, and, C, my object can conform to the contract and be used.\n\nWhile this is a looser system, it is also more flexible.  For example, contracts can consists of subsets or even overlapping collections of methods from other contracts (one contract may us methods, A and B, while another uses B and C).\n\nNote that you can achieve EVERYTHING you can in this dynamic form or polymorphism as you can in the strongly typed languages (with the exception of type safety imposed by the language).  So I don't have any qualms about using the term \"polymorphism\" in the JavaScript case.\n\n(I also note the first line of the Wikipedia article you quote says exactly what I have:\n\n\"Type polymorphism in object-oriented programming is the ability of one type, A, to appear as and be used like another type, B. In strongly typed languages, this usually means that type A somehow derives from type B, or type A implements an interface that represents type B. In weakly typed languages types are implicitly polymorphic.\" -- mike)\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-07-07_12:30:14", "date": "2 years ago", "message": "In a strongly typed language, the only way to achieve polymorphism is to derive different implementations from the same base class.  This is to avoid the sort of accidental name-collision that you describe.  Also note that in modern languages, a polymorphic object need not derive from an actual base class, but can simply declare that it implements a particular \"abstract interface\".<br><br>But the underlying concept of polymorphism more basically, getting two different \"types\" of objects to behave the same in some respect.  In dynamic languages, like Javascript (and Python), this is acheived via \"Duck Typing\" (if it walks like a duck, quacks like a duck, .... it's a duck).  The \"contract\" is simply a collection of methods that each of the objects supports that are sufficient for some piece of code to interact with them.  Note that there need not be a formal base class or abstract interface defined for this to occur.  Simply by implmenting methods, A, B, and, C, my object can conform to the contract and be used.<br><br>While this is a looser system, it is also more flexible.  For example, contracts can consists of subsets or even overlapping collections of methods from other contracts (one contract may us methods, A and B, while another uses B and C).<br><br>Note that you can achieve EVERYTHING you can in this dynamic form or polymorphism as you can in the strongly typed languages (with the exception of type safety imposed by the language).  So I don't have any qualms about using the term \"polymorphism\" in the JavaScript case.<br><br>(I also note the first line of the Wikipedia article you quote says exactly what I have:<br><br>\"Type polymorphism in object-oriented programming is the ability of one type, A, to appear as and be used like another type, B. In strongly typed languages, this usually means that type A somehow derives from type B, or type A implements an interface that represents type B. In weakly typed languages types are implicitly polymorphic.\" -- mike)<br>", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 7, "user_voted": {"username": "yawar_amin", "avatar_url": "http://media.disqus.com/uploads/users/2365/avatar32.jpg", "display_name": "Yawar Amin"}, "num_replies": 9, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 12243945, "depth": 1, "points": 7, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "313744469": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "RE: private and public members - instead of using getter and setter functions you can make the variables \"public\" by adding them to 'this'://declare variable in function scope:var x = 7;//now make it 'public', ie externally visiblethis.x = x;", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-09-17_04:58:02", "date": "2 months ago", "message": "RE: private and public members - instead of using getter and setter functions you can make the variables \"public\" by adding them to 'this'://declare variable in function scope:var x = 7;//now make it 'public', ie externally visiblethis.x = x;", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "c720c0d32ffe449bf8efcae2d822333c", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "4338618": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "1. \"new A\" is identical to \"new A()\".  Both will call the constructor with no arguments [note that all the code on this page is LIVE - you can view source and see that these examples are executing, and then output the results inline].\r\n\r\n2. Yes, there is a difference between assigning a function in the constructor or using a prototype.  The former is more efficient to create objects - you don't allocate additional storage for the function references inside of each instance - they are all just created once in the prototype, and then referred to as needed.  Functionally, both will work nearly the same; though there are differences in how functions would be \"inherited\" if you want to subclass this constructor.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-12-11_20:20:34", "date": "2 years ago", "message": "1. \"new A\" is identical to \"new A()\".  Both will call the constructor with no arguments [note that all the code on this page is LIVE - you can view source and see that these examples are executing, and then output the results inline].\n<br>\n<br>2. Yes, there is a difference between assigning a function in the constructor or using a prototype.  The former is more efficient to create objects - you don't allocate additional storage for the function references inside of each instance - they are all just created once in the prototype, and then referred to as needed.  Functionally, both will work nearly the same; though there are differences in how functions would be \"inherited\" if you want to subclass this constructor.", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 1, "user_voted": {"username": "yawar_amin", "avatar_url": "http://media.disqus.com/uploads/users/2365/avatar32.jpg", "display_name": "Yawar Amin"}, "num_replies": 1, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 4308247, "depth": 1, "points": 1, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "143153762": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "That's how you accomplish polymorphism in a prototype-based language.  See the long thread on this topic here.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-02-08_23:13:06", "date": "9 months ago", "message": "That's how you accomplish polymorphism in a prototype-based language.  See the long thread on this topic here.", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 111784090, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "51517542": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "i've noticed that jQuery does it a very strange way that miraculously works!\ne.g\n\n(function(){\n\tvar foo=function(){\n\t\treturn new foo.fn.bar()\n\t},\n\tfoo.fn=foo.prototype={\n\t\tx:'a',\n\t\ty:function(){\n\t\t\treturn this;\n\t\t},\n\t\tbar:function(){\n\t\t\tthis.a=2;\n\t\t\treturn this;\n\t\t}\n\t}\n\tfoo.fn.bar.prototype=foo.fn;\n}(window))\n\nso p=foo() sets p as\n\np\n    x:'a'\n    y:function\n    bar:function\n    a:2", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-05-22_11:36:09", "date": "1 year ago", "message": "i've noticed that jQuery does it a very strange way that miraculously works!<br>e.g<br><br>(function(){<br>\tvar foo=function(){<br>\t\treturn new foo.fn.bar()<br>\t},<br>\tfoo.fn=foo.prototype={<br>\t\tx:'a',<br>\t\ty:function(){<br>\t\t\treturn this;<br>\t\t},<br>\t\tbar:function(){<br>\t\t\tthis.a=2;<br>\t\t\treturn this;<br>\t\t}<br>\t}<br>\tfoo.fn.bar.prototype=foo.fn;<br>}(window))<br><br>so p=foo() sets p as<br><br>p<br>    x:'a'<br>    y:function<br>    bar:function<br>    a:2", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "30cf48563e8257ab1ecfd0b7fd17037a", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "207217084": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "\"A.call(this)\" - calls the function \"A\", but sets the \"this\" variable before doing so. \u00a0Compare to \"A()\", which calls the A function but the value of \"this\" will be the global window object instead (not what you want). \u00a0You can add addition arguments to the call to the superclasses constructor like: \"A.call(this, arg1, arg2, arg3)\".\n\nI generally try to avoid assigning functions directly to an object property - I prefer methods to be assigned to the contructor's prototype (e.g., A.prototype.myMethod = function ( ) {...}). \u00a0This way - all instances of the object share the same method without having a unique closure created for each one.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-05-19_13:11:22", "date": "6 months ago", "message": "\"A.call(this)\" - calls the function \"A\", but sets the \"this\" variable before doing so. \u00a0Compare to \"A()\", which calls the A function but the value of \"this\" will be the global window object instead (not what you want). \u00a0You can add addition arguments to the call to the superclasses constructor like: \"A.call(this, arg1, arg2, arg3)\".<br><br>I generally try to avoid assigning functions directly to an object property - I prefer methods to be assigned to the contructor's prototype (e.g., A.prototype.myMethod = function ( ) {...}). \u00a0This way - all instances of the object share the same method without having a unique closure created for each one.", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 206079801, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "72302200": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "var parentObj= {\n\npty1 : 1,\n\nsubObj: {\n\nsubpty1 : A.pty; /*How can I reference the super myObj's propety 'pty' at here ? */ // I think soo\n}\n}; ", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-08-26_02:02:31", "date": "1 year ago", "message": "var parentObj= {<br><br>pty1 : 1,<br><br>subObj: {<br><br>subpty1 : A.pty; /*How can I reference the super myObj's propety 'pty' at here ? */ // I think soo<br>}<br>};", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 2, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 65964563, "depth": 1, "points": 1, "user_key": "a4934482eb207333529f970f8209524c", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "8253564": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "ccc", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-04-16_01:54:01", "date": "2 years ago", "message": "ccc", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 3396308, "depth": 2, "points": 0, "user_key": "8e8d8f775f5f4107d4a02feded155d7d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "175520898": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "\nfunction print(text) {\n\tWScript.Echo(text);\n}\n\nfunction Base() {\n\n\t/*public*/ this.foo = function(x) {\n\t\treturn \"Base.foo: \" + x;\n\t}\n}\n\nfunction Derived() {\n\t/*inherit*/ Base.call(this);\n\tthis.constructor = Derived;\n\n\t/*private*/ var _x = 100; \n\t/*public*/ this.getX = function() {\n\t\treturn _x;\n\t}\n\n\t/*override*/ this.foo = function(x) {\n\t\treturn \"Derived.foo: \" + x;\n\t}\n}\n\n\nvar b = new Base;\nprint(b.foo(123));\nprint(b.constructor);\nprint(b.constructor == Base);\n\n\nvar d = new Derived;\nprint(d.foo(123));\nprint(d.constructor);\nprint(d.constructor == Derived);\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-03-31_10:12:45", "date": "7 months ago", "message": "<br>function print(text) {<br>\tWScript.Echo(text);<br>}<br><br>function Base() {<br><br>\t/*public*/ this.foo = function(x) {<br>\t\treturn \"Base.foo: \" + x;<br>\t}<br>}<br><br>function Derived() {<br>\t/*inherit*/ Base.call(this);<br>\tthis.constructor = Derived;<br><br>\t/*private*/ var _x = 100; <br>\t/*public*/ this.getX = function() {<br>\t\treturn _x;<br>\t}<br><br>\t/*override*/ this.foo = function(x) {<br>\t\treturn \"Derived.foo: \" + x;<br>\t}<br>}<br><br><br>var b = new Base;<br>print(b.foo(123));<br>print(b.constructor);<br>print(b.constructor == Base);<br><br><br>var d = new Derived;<br>print(d.foo(123));<br>print(d.constructor);<br>print(d.constructor == Derived);<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "2fca53e615069649692c6fed4d0c318d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "303736972": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "It's just setting a property called 'constructor' in the prototype. \u00a0This is its \"normal\" setting, but when you get the prototype from an instance of another class, the 'constructor' will be set to the other class's constructor instead. \u00a0So this just sets it to what is expected in case any code depends on it.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-09-06_15:56:11", "date": "2 months ago", "message": "It's just setting a property called 'constructor' in the prototype. \u00a0This is its \"normal\" setting, but when you get the prototype from an instance of another class, the 'constructor' will be set to the other class's constructor instead. \u00a0So this just sets it to what is expected in case any code depends on it.", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 168905991, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "76215951": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Hi,\nCan you please explain this in more detail?\nThanks.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-08_19:55:49", "date": "1 year ago", "message": "Hi,<br>Can you please explain this in more detail?<br>Thanks.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 58308054, "depth": 2, "points": 0, "user_key": "twitter-15157634", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "15344791": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Thanks , I too was confused with line   B.prototype.constructor = B ;", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-08-25_03:38:19", "date": "2 years ago", "message": "Thanks , I too was confused with line   B.prototype.constructor = B ;", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 4950779, "depth": 2, "points": 0, "user_key": "e75091aa8f52392fb417bc4609b19e9a", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "81276568": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I'm missing something essential here, I guess. Say I have the following class\n\nfunction A()\n{\n    var age;\n\n    this.getAge = function() { return age; }\n    this.setAge = function(a) { age = a; }\n}\n\na = new A();\n\nIf you then write:\na.foo = \"someValue\";\n\nThen:\ndocument.write(a.foo);\n\nwould actually print: someValue\n\nCould someone tell me what happens in the background here?", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-27_16:33:12", "date": "1 year ago", "message": "I'm missing something essential here, I guess. Say I have the following class<br><br>function A()<br>{<br>    var age;<br><br>    this.getAge = function() { return age; }<br>    this.setAge = function(a) { age = a; }<br>}<br><br>a = new A();<br><br>If you then write:<br>a.foo = \"someValue\";<br><br>Then:<br>document.write(a.foo);<br><br>would actually print: someValue<br><br>Could someone tell me what happens in the background here?", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "39795544cc5e828b0fa36972909b3578", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "103695001": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "1. Yes, the second approach is definitely better. The second approach is NOT modifying the constructor of the baseclass, all it does is modify the constructor property of an INSTANCE of the baseclass, A. \n2. The snippet you posted will never work. It's assigning an instance (object) of class A to this.inheritFrom. And then invoking it as a method call, which is an error. \n\nInstead I think what you meant is for the constructor of B: \"A.call(this)\". This will work, but now you're inlining all the properties of A into B.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-26_23:47:42", "date": "11 months ago", "message": "1. Yes, the second approach is definitely better. The second approach is NOT modifying the constructor of the baseclass, all it does is modify the constructor property of an INSTANCE of the baseclass, A. <br>2. The snippet you posted will never work. It's assigning an instance (object) of class A to this.inheritFrom. And then invoking it as a method call, which is an error. <br><br>Instead I think what you meant is for the constructor of B: \"A.call(this)\". This will work, but now you're inlining all the properties of A into B.", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 84789625, "depth": 1, "points": 0, "user_key": "twitter-34024308", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "111784090": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Please, correct me if I am wrong, but example given above under the title \"Polymorphism\" has nothing to do with OO Polymorphism.\nThe said example only presents a way to name-space two js functions with the same name.\nRegards,\nVladimir.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-12-14_17:20:10", "date": "11 months ago", "message": "Please, correct me if I am wrong, but example given above under the title \"Polymorphism\" has nothing to do with OO Polymorphism.<br>The said example only presents a way to name-space two js functions with the same name.<br>Regards,<br>Vladimir.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "d040fce39447a95bdbb11720b0d86d8f", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "76630684": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "From one of the examples:\n\n\"B.prototype = new A;  // Define sub-class\"\n\nBut it doesn't define a sub-class. It makes a single object act as the prototype for all objects created with \"new B\". \n\nThen in the example constructor for B, you have:\n\n\"A.call(this); // Call super-class constructor (if desired)\"\n\nIt's not really a matter of desire. In some cases that call would be essential (and yet still isn't quite right).\n\nThe difference can be seen by commenting out \"A.call(this);\" and testing the state of an instance of B as follows:\n\nalert(b.hasOwnProperty('x'));\nb.DoIt();\nalert(b.hasOwnProperty('x'));\n\nBefore DoIt causes this.x to be assigned a value, b does not have an x property of its own. It inherits the current value from the single instance of B. After, it does have its own x property.\n\nThis is fine for numbers, strings and other simple data values that have no identity of their own - a hundred objects can share the same number property without it causing a problem. When they need to change the value (without affecting other objects), they automatically get their own definition of that property, hiding the inherited one. So it *seems* fine.\n\nBut in browser apps, x may be storing an object with an identity. e.g. the constructor of A might create a DIV element and store it in X. So a \"subclass\" like B would actually be holding a reference to the same single DIV created by the constructor of A. So you might have a dozen B instances, supposedly filling up their own DIV with content, but actually they're all writing into the same DIV.\n\nThe workaround \"A.call(this);\" appears to fix this, because it forces A's constructor to execute once per instance of B, and hence would cause a unique DIV to be created and stored in x. But then the original instance of A (used as the prototype) has unnecessarily created a DIV that then hangs around never being used, which is just weird.\n\nI recommend reading Douglas Crockford's website and book(s) and watching his videos explaining how JS works to get a better understanding of this stuff.\n\nIn short, I'd suggest that trying to view JS through the eye of a Java/C#/C++ programmer will just lead to confusion. It isn't that kind of language. It sometimes looks like it is, but it's not.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-10_06:45:12", "date": "1 year ago", "message": "From one of the examples:<br><br>\"B.prototype = new A;  // Define sub-class\"<br><br>But it doesn't define a sub-class. It makes a single object act as the prototype for all objects created with \"new B\". <br><br>Then in the example constructor for B, you have:<br><br>\"A.call(this); // Call super-class constructor (if desired)\"<br><br>It's not really a matter of desire. In some cases that call would be essential (and yet still isn't quite right).<br><br>The difference can be seen by commenting out \"A.call(this);\" and testing the state of an instance of B as follows:<br><br>alert(b.hasOwnProperty('x'));<br>b.DoIt();<br>alert(b.hasOwnProperty('x'));<br><br>Before DoIt causes this.x to be assigned a value, b does not have an x property of its own. It inherits the current value from the single instance of B. After, it does have its own x property.<br><br>This is fine for numbers, strings and other simple data values that have no identity of their own - a hundred objects can share the same number property without it causing a problem. When they need to change the value (without affecting other objects), they automatically get their own definition of that property, hiding the inherited one. So it *seems* fine.<br><br>But in browser apps, x may be storing an object with an identity. e.g. the constructor of A might create a DIV element and store it in X. So a \"subclass\" like B would actually be holding a reference to the same single DIV created by the constructor of A. So you might have a dozen B instances, supposedly filling up their own DIV with content, but actually they're all writing into the same DIV.<br><br>The workaround \"A.call(this);\" appears to fix this, because it forces A's constructor to execute once per instance of B, and hence would cause a unique DIV to be created and stored in x. But then the original instance of A (used as the prototype) has unnecessarily created a DIV that then hangs around never being used, which is just weird.<br><br>I recommend reading Douglas Crockford's website and book(s) and watching his videos explaining how JS works to get a better understanding of this stuff.<br><br>In short, I'd suggest that trying to view JS through the eye of a Java/C#/C++ programmer will just lead to confusion. It isn't that kind of language. It sometimes looks like it is, but it's not.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 4, "user_voted": {"username": "twitter-34024308", "avatar_url": "http://media.disqus.com/uploads/users/559/5288/avatar32.jpg", "display_name": "Saad Malik"}, "num_replies": 3, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 4, "user_key": "danielearwicker", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "90247335": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Polymorphism literally means \"distinct things that have the same shape\".  So, I'll have to disagree with you that \"duck typing\" is not a form of polymorphism.  I think you can have polymorphism without a formal type system.\n\nWithout being didactic about terminology, I just meant to indicate that JavaScript duck typing can be useful in building \"object oriented\" systems where two different implementations can be treated the same through their common interfaces - i.e., by carefully using the same method names so they can be used in a common context.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-10-26_11:31:54", "date": "1 year ago", "message": "Polymorphism literally means \"distinct things that have the same shape\".  So, I'll have to disagree with you that \"duck typing\" is not a form of polymorphism.  I think you can have polymorphism without a formal type system.<br><br>Without being didactic about terminology, I just meant to indicate that JavaScript duck typing can be useful in building \"object oriented\" systems where two different implementations can be treated the same through their common interfaces - i.e., by carefully using the same method names so they can be used in a common context.", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 2, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 90195767, "depth": 3, "points": 2, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "359922345": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "This remains the definitive. introduction to OO JS.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-11-10_05:18:38", "date": "1 week ago", "message": "This remains the definitive. introduction to OO JS.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "timacheson", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "96486068": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Awesome article!\nThanks fr sharing", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-12_06:03:09", "date": "1 year ago", "message": "Awesome article!<br>Thanks fr sharing", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "92bdb33bcea35492780d5ca9a0347205", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "16170677": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "i was also thinking why do we need B.prototype.constructor=B;\r\n\r\nthis was very helpful... \r\nthanx mckoss", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-09-08_01:54:41", "date": "2 years ago", "message": "i was also thinking why do we need B.prototype.constructor=B;\n<br>\n<br>this was very helpful... \n<br>thanx mckoss", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 15344791, "depth": 3, "points": 0, "user_key": "ddad0acf5377ae98a62e88695d37c1f7", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "101250234": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Great job Mike ! I love the fact that the code displayed is executed live to build the diagrams.\n\nI tipped this page on http://tiptheweb.org and everyone should do the same", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-23_13:02:35", "date": "12 months ago", "message": "Great job Mike ! I love the fact that the code displayed is executed live to build the diagrams.<br><br>I tipped this page on <a href=\"http://tiptheweb.org\" rel=\"nofollow\">http://tiptheweb.org</a> and everyone should do the same", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "twitter-15454506", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "143229117": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I think you're right.  instanceof still manages to return the Derived class.  But the constructor value is set to the Base class.  I find that confusing, so I usually correct the constructor in the prototype to make sure any other code that might test for it returns the correct constructor function.\n\nI wrote another sample piece of code here:\n\nhttp://wiki.pageforest.com/#js-patterns/subclassing", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-02-09_01:44:13", "date": "9 months ago", "message": "I think you're right.  instanceof still manages to return the Derived class.  But the constructor value is set to the Base class.  I find that confusing, so I usually correct the constructor in the prototype to make sure any other code that might test for it returns the correct constructor function.<br><br>I wrote another sample piece of code here:<br><br><a href=\"http://wiki.pageforest.com/#js-patterns/subclassing\" rel=\"nofollow\">http://wiki.pageforest.com/#js...</a>", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 142092536, "depth": 2, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "143153856": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Thanks.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-02-08_23:13:24", "date": "9 months ago", "message": "Thanks.", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 101250234, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "109068996": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Superb stuff... Helped me a lot...", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-12-09_02:10:53", "date": "11 months ago", "message": "Superb stuff... Helped me a lot...", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "606e97f6a9c729cabe2708b360efd031", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "324655304": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Hey i build this little library to simply create and extend classes and objects in javascript, you can check it on:\nhttp://code.google.com/p/jsclassextend/", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-10-01_18:06:47", "date": "1 month ago", "message": "Hey i build this little library to simply create and extend classes and objects in javascript, you can check it on:<br><a href=\"http://code.google.com/p/jsclassextend/\" rel=\"nofollow\">http://code.google.com/p/jscla...</a>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "01a1e23d3d8b475d57023a13e55ff7aa", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "124883155": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Cool! Thanks for this great article!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-01-06_03:41:01", "date": "10 months ago", "message": "Cool! Thanks for this great article!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "eb52e5eb43c15d9588a161d47a700303", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "3396308": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Agreed. I'd also love to see something about how the methods discussed above can be used in concert with jQuery. I've found nothing worth reading about OOD alongside jQuery.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-10-30_15:38:04", "date": "3 years ago", "message": "Agreed. I'd also love to see something about how the methods discussed above can be used in concert with jQuery. I've found nothing worth reading about OOD alongside jQuery.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 2236638, "depth": 1, "points": 0, "user_key": "cacd77cee3090752fab46ad42a4d2f42", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "84789625": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Please delete my other question regarding \"b.prototype.constructor = b\". Replied by you already.\n\nI have 2 more questions. \n\nQuestion 1. If I compare class in JavaScript and C++, it seems \"A.prototype\" is somewhat like the base class in C++. Can I just define a base class? For example:\n\nInstead of:\n\n  function B()\n { }\n  B.prototype.x = 1;\n  B.prototype.y = 2;\n\nCan I do this:\n\n  function A()\n  {\n    this.x = 1;\n    this.y = 2;\n  }\n  function B()\n  {}\n  B.prototype = new A;\n  B.prototype.constructor = A;\n\nI do see one difference between these two approaches. In the first approach, the inheritance can be done without modifying the constructor of the base class. Are there any other benefits?\n\nQuestion 2: I saw another way of inheriting the class as explained in this link: http://www.webreference.com/js/column79/3.html\n\nInstead of using \"prototype\", a class inherits another class as follows:\n\n  function A()\n  {}\n\n  function B()\n  {\n    this.inheritFrom = new A;    // inheritFrom is not a keyword\n    this.inheritFrom();\n  }\n\nIs there any problem with this kind of inheritance implementation?\n\nThanks!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-10-07_02:27:31", "date": "1 year ago", "message": "Please delete my other question regarding \"b.prototype.constructor = b\". Replied by you already.<br><br>I have 2 more questions. <br><br>Question 1. If I compare class in JavaScript and C++, it seems \"A.prototype\" is somewhat like the base class in C++. Can I just define a base class? For example:<br><br>Instead of:<br><br>  function B()<br> { }<br>  B.prototype.x = 1;<br>  B.prototype.y = 2;<br><br>Can I do this:<br><br>  function A()<br>  {<br>    this.x = 1;<br>    this.y = 2;<br>  }<br>  function B()<br>  {}<br>  B.prototype = new A;<br>  B.prototype.constructor = A;<br><br>I do see one difference between these two approaches. In the first approach, the inheritance can be done without modifying the constructor of the base class. Are there any other benefits?<br><br>Question 2: I saw another way of inheriting the class as explained in this link: <a href=\"http://www.webreference.com/js/column79/3.html\" rel=\"nofollow\">http://www.webreference.com/js...</a><br><br>Instead of using \"prototype\", a class inherits another class as follows:<br><br>  function A()<br>  {}<br><br>  function B()<br>  {<br>    this.inheritFrom = new A;    // inheritFrom is not a keyword<br>    this.inheritFrom();<br>  }<br><br>Is there any problem with this kind of inheritance implementation?<br><br>Thanks!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "2218af6015ba793bceb8a3af691c301d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "2236638": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "My pleasure.  A lot's happened in the JavaScript world, even since the re-write of this article in 2006.  My next version should probably show some of the other commonly used paradigms for defining classes (e.g., those used in prototype.js or jQuery.js).", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-09-08_16:52:38", "date": "3 years ago", "message": "My pleasure.  A lot's happened in the JavaScript world, even since the re-write of this article in 2006.  My next version should probably show some of the other commonly used paradigms for defining classes (e.g., those used in prototype.js or jQuery.js).", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 3, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "96588000": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Thanks - glad to here it!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-12_12:46:01", "date": "1 year ago", "message": "Thanks - glad to here it!", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 85117415, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "70444772": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "no snitching :p", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-08-21_09:11:27", "date": "1 year ago", "message": "no snitching :p", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 3, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 45912899, "depth": 1, "points": 3, "user_key": "eb701996318d93b638fde64c0464d1ca", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "80793833": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "javascript being a dynamic language it's easy to define things on the fly (if you know how)...\n\nlets say\n\nvar myObj = {}; // just a blank object\nmyObj.myAttr= 2; // defines myAttr on myObj as 2\nmyObj['myAttr'] = 2; // also define myAttr on myObj as 2\n\n.. so myObj.mtAttr= 2 and myObj['myAttr'] = 2 result in the same attribute being set on the object.\n\nand because you can use an array style you can dynamically set attributes/variables...\n\nvar attributes = {\n  'attr1' : 'one',\n  'attr2' : 'two',\n  'attr3' : 'three'\n}\n\nvar anObj = {};\n\nfor(var name in attributes) {\n  anObj[name] = attributes[name];\n}\n\nwill result in...  \n\nanObj.attr1 = 'one';\nanObj.attr2 = 'two';\nanObj.attr3 = 'three';", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-25_09:45:32", "date": "1 year ago", "message": "javascript being a dynamic language it's easy to define things on the fly (if you know how)...<br><br>lets say<br><br>var myObj = {}; // just a blank object<br>myObj.myAttr= 2; // defines myAttr on myObj as 2<br>myObj['myAttr'] = 2; // also define myAttr on myObj as 2<br><br>.. so myObj.mtAttr= 2 and myObj['myAttr'] = 2 result in the same attribute being set on the object.<br><br>and because you can use an array style you can dynamically set attributes/variables...<br><br>var attributes = {<br>  'attr1' : 'one',<br>  'attr2' : 'two',<br>  'attr3' : 'three'<br>}<br><br>var anObj = {};<br><br>for(var name in attributes) {<br>  anObj[name] = attributes[name];<br>}<br><br>will result in...  <br><br>anObj.attr1 = 'one';<br>anObj.attr2 = 'two';<br>anObj.attr3 = 'three';", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 76215951, "depth": 3, "points": 0, "user_key": "384eae2c6acc7dd2dadcfe053dc27701", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "3921644": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "This doesn't seem to be true. If \"B.prototype.constructor = B\" is commented out in your code, \"b instanceof B\" still returns true.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-11-20_17:11:36", "date": "3 years ago", "message": "This doesn't seem to be true. If \"B.prototype.constructor = B\" is commented out in your code, \"b instanceof B\" still returns true.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 2, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 2392953, "depth": 1, "points": 0, "user_key": "d3c5d42b6e3e4c682a8b454fa3c32d7b", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "264688374": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I could not understand this line in Object Prototype explanation:\nB.prototype.constructor\u00a0=\u00a0B;\n\nWhy it is there?\n\nPlease reply.\nthanks", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-07-26_01:22:54", "date": "3 months ago", "message": "I could not understand this line in Object Prototype explanation:<br>B.prototype.constructor\u00a0=\u00a0B;<br><br>Why it is there?<br><br>Please reply.<br>thanks", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "satya61229", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "211087607": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Very well written. You have made this topic much easier to grasp than any of the articles I read before this. Thanks! ", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-05-24_22:41:14", "date": "6 months ago", "message": "Very well written. You have made this topic much easier to grasp than any of the articles I read before this. Thanks!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "1f5152acb1550727084f69620eb2491d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "142092536": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "hmmm. that doesn't seem to be the case.\nEven without using B.prototype.constructor  = B;\nif I create an instance b = new B(); (b instanceof B) return true.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-02-07_15:44:50", "date": "9 months ago", "message": "hmmm. that doesn't seem to be the case.<br>Even without using B.prototype.constructor  = B;<br>if I create an instance b = new B(); (b instanceof B) return true.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 2392953, "depth": 1, "points": 0, "user_key": "327f7aa4a8ccf5b2dbee4cb2536a86f6", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "4950779": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "thanks, this piece help a lot", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-01-07_02:44:14", "date": "2 years ago", "message": "thanks, this piece help a lot", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 2, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 2392953, "depth": 1, "points": 1, "user_key": "3d6b5d908aa4c4c777823d9775d0e753", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "3001605": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "As a  Java and Actionscript developer i never really understood OO in javascript , but this article is very helpful  and nicely written .\r\nThanks a lot !\r\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-10-11_17:57:32", "date": "3 years ago", "message": "As a  Java and Actionscript developer i never really understood OO in javascript , but this article is very helpful  and nicely written .\n<br>Thanks a lot !\n<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "3f1e95089de9cdf3f6cb328ea40d0e55", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "168905991": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "What is the meaning of     A.prototype.constructor = A;\n\nThanks for team", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-03-21_03:20:07", "date": "8 months ago", "message": "What is the meaning of     A.prototype.constructor = A;<br><br>Thanks for team", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "e6fcf2187a73ca4c594a70e79d7c7de8", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "207220489": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": "6 months ago", "dislikes": 0, "raw_message": "I've recently open-sources a small helper library\u00a0I use as the basis of new JS projects:\n\nhttps://github.com/mckoss/namespace\n\nThere are some new wrappers documented here to help create subclasses including an efficient multiple-inheritance model:\n\nhttps://github.com/mckoss/namespace/wiki/funcs.js", "has_replies": false, "vote": false, "votable": true, "last_modified_by": "author", "real_date": "2011-05-19_13:18:42", "date": "6 months ago", "message": "I've recently open-sources a small helper library\u00a0I use as the basis of new JS projects:<br><br><a href=\"https://github.com/mckoss/namespace\" rel=\"nofollow\">https://github.com/mckoss/name...</a><br><br>There are some new wrappers documented here to help create subclasses including an efficient multiple-inheritance model:<br><br><a href=\"https://github.com/mckoss/namespace/wiki/funcs.js\" rel=\"nofollow\">https://github.com/mckoss/name...</a>", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "234762507": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Thank you for a decent explanation! (For some reason if you google JavaScript classes, the first few hits are really, really irritatingly terrible explanations.)", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-06-25_12:46:34", "date": "4 months ago", "message": "Thank you for a decent explanation! (For some reason if you google JavaScript classes, the first few hits are really, really irritatingly terrible explanations.)", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "f3c52e5ef3d2b471d0ef51c66c21d10c", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "50196239": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I know you asked this quite a while ago, but I'll give you an answer in case you haven't gotten one by email:\n\nprototype is special - you can't overwrite it. If you could, you would seriously break your code (especially if you do it to the Object prototype, which will affect everything). But what you can do is add to it.\n\nIn your examples, the first one \"adds\" to the prototype property, giving another method to the already existing prototype property of Object. This property already has many methods and properties of its own.\n\nIn the second example, you're trying to replace the prototype with a new object that only has 1 method and no properties.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-05-13_18:28:04", "date": "1 year ago", "message": "I know you asked this quite a while ago, but I'll give you an answer in case you haven't gotten one by email:<br><br>prototype is special - you can't overwrite it. If you could, you would seriously break your code (especially if you do it to the Object prototype, which will affect everything). But what you can do is add to it.<br><br>In your examples, the first one \"adds\" to the prototype property, giving another method to the already existing prototype property of Object. This property already has many methods and properties of its own.<br><br>In the second example, you're trying to replace the prototype with a new object that only has 1 method and no properties.", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 6, "user_voted": {"username": "yawar_amin", "avatar_url": "http://media.disqus.com/uploads/users/2365/avatar32.jpg", "display_name": "Yawar Amin"}, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 12986447, "depth": 1, "points": 6, "user_key": "65e7ceb62ac89533f33933b41a2a0fdf", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "105892113": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "UPDATE AGAIN^^\n\n\nfunction herit(_this){ _this.super = _this.self || 'undefined'; _this.self = _this; eval('_this.'+herit.caller.name+\"=_this;\");};\n\nthen you can do something like that :\n\n\nA.prototype.DoIt = function(){\n    // do something\n}\nB.prototype.DoIt = function(){\n    eval(this.super.fname+\".prototype.DoIt.call(this.super);\");    // Call parent method\n    // do something\n}\nC.prototype.DoIt = function(){\n    A.prototype.DoIt.call(this.A);    // Call explicit A\n    // do something\n}", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-12-02_09:03:46", "date": "11 months ago", "message": "UPDATE AGAIN^^<br><br><br>function herit(_this){ _this.super = _this.self || 'undefined'; _this.self = _this; eval('_this.'+<a href=\"http://herit.caller.name\" rel=\"nofollow\">herit.caller.name</a>+\"=_this;\");};<br><br>then you can do something like that :<br><br><br>A.prototype.DoIt = function(){<br>    // do something<br>}<br>B.prototype.DoIt = function(){<br>    eval(this.super.fname+\".prototype.DoIt.call(this.super);\");    // Call parent method<br>    // do something<br>}<br>C.prototype.DoIt = function(){<br>    A.prototype.DoIt.call(this.A);    // Call explicit A<br>    // do something<br>}", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 105838911, "depth": 2, "points": 1, "user_key": "368b8ca0973c5bcf340acbb8784b1169", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "4308247": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": "2 years ago", "dislikes": 0, "raw_message": "Excellent article - thank you for this Mike. It is very helpful.\n\nTwo questions.\n\n1) In the section starting \"Polymorphism is achieved by simply ...\" you have this:\na = new A;\nb = new B;\nShouldn't it be this:\na = new A();\nb = new B();\n\n2) Is there any difference between these two techniques?\n\nfunction A() {\n    this.x = 1;\n}\nA.prototype.DoIt = function() {\n    this.x += 1;\n}\n\nand\n\nfunction A() {\n    this.x = 1;\n    this.DoIt = DoIt;\n}\nfunction DoIt() {\n    this.x += 1;\n}\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-12-10_09:04:03", "date": "2 years ago", "message": "Excellent article - thank you for this Mike. It is very helpful.<br><br>Two questions.<br><br>1) In the section starting \"Polymorphism is achieved by simply ...\" you have this:<br>a = new A;<br>b = new B;<br>Shouldn't it be this:<br>a = new A();<br>b = new B();<br><br>2) Is there any difference between these two techniques?<br><br>function A() {<br>    this.x = 1;<br>}<br>A.prototype.DoIt = function() {<br>    this.x += 1;<br>}<br><br>and<br><br>function A() {<br>    this.x = 1;<br>    this.DoIt = DoIt;<br>}<br>function DoIt() {<br>    this.x += 1;<br>}<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 2, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "robertmarkbram", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "4308762": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "excellent!!!\r\nthis is what I was looking for...!\r\nthanks!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-12-10_09:34:34", "date": "2 years ago", "message": "excellent!!!\n<br>this is what I was looking for...!\n<br>thanks!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "36f7ac943f58da8554cf331110f3305d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "80539426": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "This is nice framework. I'm worried only about one thing (may be it's useless to point out)\n\nFunction.prototype.StName = function ()\n{\n    var st;\n\n    st = this.toString();\n    st = st.substring(st.indexOf(\" \")+1, st.indexOf(\"(\"));\n    if (st.charAt(0) == \"(\")\n        st = \"function ...\";\n\n    return st;\n}\n\nThis suppose that there is strictly one \" \" (space) between function and A, if there is more then one, it's not working, because it creates function with key \" A_Doit\" instead of \"A_Doit\".\n\nI hope that there will be someway how to do this things more independetly on spacing.\n\nAnyway, this article is cool.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-24_09:41:44", "date": "1 year ago", "message": "This is nice framework. I'm worried only about one thing (may be it's useless to point out)<br><br>Function.prototype.StName = function ()<br>{<br>    var st;<br><br>    st = this.toString();<br>    st = st.substring(st.indexOf(\" \")+1, st.indexOf(\"(\"));<br>    if (st.charAt(0) == \"(\")<br>        st = \"function ...\";<br><br>    return st;<br>}<br><br>This suppose that there is strictly one \" \" (space) between function and A, if there is more then one, it's not working, because it creates function with key \" A_Doit\" instead of \"A_Doit\".<br><br>I hope that there will be someway how to do this things more independetly on spacing.<br><br>Anyway, this article is cool.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "c7b7584facc4bb3844860a0e50e9ff20", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "56609575": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Nice i m studying about  Oop  javascript", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-06-14_03:11:33", "date": "1 year ago", "message": "Nice i m studying about  Oop  javascript", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "26bdfd0c6b81a40b0209a0f67fa8f6bb", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "72302378": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Sorry,\n\nA should be parentObj", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-08-26_02:03:04", "date": "1 year ago", "message": "Sorry,<br><br>A should be parentObj", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 72302200, "depth": 2, "points": 1, "user_key": "a4934482eb207333529f970f8209524c", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "303734578": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": "2 months ago", "dislikes": 0, "raw_message": "This is a quirk of how function statements are executed in JavaScript. \u00a0Normally, variables are brought into scope in the order of execution. \u00a0But there is an exception for function declarations so you can have forward referenced functions. \u00a0So, for example:\n\n---\nfoo();\n\nfunction foo() {\n\u00a0 alert('hello');\n}\n---\n\nThe developers of JavaScript wanted this code to work - so 'foo' has to be defined BEFORE any of the code in the file is executed. \u00a0I think there is a first pass that handles all the function definitions (when the script is loaded), and a second pass that executes the statements in the script.\n\nNote that if you use the assignment style of function declaration, forward refereces DO NOT work:\n\nfoo = function () {\n\u00a0 alert(\"goodbye\");\n}", "has_replies": false, "vote": false, "votable": true, "last_modified_by": "author", "real_date": "2011-09-06_15:52:37", "date": "2 months ago", "message": "This is a quirk of how function statements are executed in JavaScript. \u00a0Normally, variables are brought into scope in the order of execution. \u00a0But there is an exception for function declarations so you can have forward referenced functions. \u00a0So, for example:<br><br>---<br>foo();<br><br>function foo() {<br>\u00a0 alert('hello');<br>}<br>---<br><br>The developers of JavaScript wanted this code to work - so 'foo' has to be defined BEFORE any of the code in the file is executed. \u00a0I think there is a first pass that handles all the function definitions (when the script is loaded), and a second pass that executes the statements in the script.<br><br>Note that if you use the assignment style of function declaration, forward refereces DO NOT work:<br><br>foo = function () {<br>\u00a0 alert(\"goodbye\");<br>}", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 225666910, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "90195767": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "No. Duck-typing is duck-typing, not polymorphism. In duck-typing, two obiects could \"accidentally\" have a method with the same name and for duck-typed language it is OK (it wouldn't complain), but for the programmer - not necessarily. It might be equally a bug, very hard to track. The problem is that in duck-typed languages the compiler/interpreter doesn't have any clue about the relationship of these two \"interfaces\", so it can't tell if it's a merely coincidence, or if they have the same method for a reason. In strong-typed languages, hovewer, this relationship is clearly stated by the programmer, by using language's built-in mechanisms, like inheritance. Duck-typing advocates treat \"If it quacks like a duck, it's a duck\" as a feature, not a bug. Yes, it's good when the object IS REALLY a duck, or something duck-like. But what if it's a platypus? Or, more worslely, a dog disguised as a duck?\r\nAn object's type is a CONTRACT. It tells us what obiect can do and what can we EXPECT from it. It gives us GUARANTEES. But when we can change the interface of an object at runtime, we can't rely on any guarantee! The object we called a method on a second ago can lack this method when we call it again. If the interface changes, the object can't be considered the same type as before the change.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-10-26_06:53:31", "date": "1 year ago", "message": "No. Duck-typing is duck-typing, not polymorphism. In duck-typing, two obiects could \"accidentally\" have a method with the same name and for duck-typed language it is OK (it wouldn't complain), but for the programmer - not necessarily. It might be equally a bug, very hard to track. The problem is that in duck-typed languages the compiler/interpreter doesn't have any clue about the relationship of these two \"interfaces\", so it can't tell if it's a merely coincidence, or if they have the same method for a reason. In strong-typed languages, hovewer, this relationship is clearly stated by the programmer, by using language's built-in mechanisms, like inheritance. Duck-typing advocates treat \"If it quacks like a duck, it's a duck\" as a feature, not a bug. Yes, it's good when the object IS REALLY a duck, or something duck-like. But what if it's a platypus? Or, more worslely, a dog disguised as a duck?\n<br>An object's type is a CONTRACT. It tells us what obiect can do and what can we EXPECT from it. It gives us GUARANTEES. But when we can change the interface of an object at runtime, we can't rely on any guarantee! The object we called a method on a second ago can lack this method when we call it again. If the interface changes, the object can't be considered the same type as before the change.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 4, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 12261455, "depth": 2, "points": 0, "user_key": "db0ffc046fd218d4a2a0d7314e6c1d98", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "18395448": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "thanks for the code, however the \"prototype\" you were adding to your code is confussing, is it okay to not use them?", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-10-03_16:26:00", "date": "2 years ago", "message": "thanks for the code, however the \"prototype\" you were adding to your code is confussing, is it okay to not use them?", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "shake178", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "206079801": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "\u00a0Hi, this is a great article and I like the fact that you take the time out to respond to peoples questions. I have two questions:\u00a0\n\n1) I want to have a superclass that accepts\u00a0arguments, and sets the\u00a0arguments\u00a0to\u00a0equivalent\u00a0variables. When i create the subclass, I'm assuming that I need the subclass needs to accept the same if not more\u00a0arguments\u00a0as the superclass. But how would I call the superclass constructor with the passed in parameters of the subclass. In your example you have used : A.call(this), are you able to please define what is happening with this. I'm assuming that you are calling A's constructor using A.call() but why are you passing 'this' ?\u00a0\n\n2) You are defining the superclass without any member functions, and adding these member functions with the prototype but why don't you declare the member functions within the superclass :\u00a0\nfunction\u00a0A()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Define\u00a0super\u00a0class\n{\n\u00a0\u00a0\u00a0\u00a0this.x\u00a0=\u00a01;    this.DoIt = function(){        //Member function instead of prototype.      this.x +=1;    };\n}\n\u00a0Thank you again.  \n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-05-18_08:21:40", "date": "6 months ago", "message": "Hi, this is a great article and I like the fact that you take the time out to respond to peoples questions. I have two questions:\u00a0<br><br>1) I want to have a superclass that accepts\u00a0arguments, and sets the\u00a0arguments\u00a0to\u00a0equivalent\u00a0variables. When i create the subclass, I'm assuming that I need the subclass needs to accept the same if not more\u00a0arguments\u00a0as the superclass. But how would I call the superclass constructor with the passed in parameters of the subclass. In your example you have used : A.call(this), are you able to please define what is happening with this. I'm assuming that you are calling A's constructor using A.call() but why are you passing 'this' ?\u00a0<br><br>2) You are defining the superclass without any member functions, and adding these member functions with the prototype but why don't you declare the member functions within the superclass :\u00a0<br>function\u00a0A()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Define\u00a0super\u00a0class<br>{<br>\u00a0\u00a0\u00a0\u00a0this.x\u00a0=\u00a01;    this.DoIt = function(){        //Member function instead of prototype.      this.x +=1;    };<br>}<br>\u00a0Thank you again.  <br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "1388a065507dbd77956c31de3bdc1842", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "352311610": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Hi, Mike!\n\n\n\nI\u2019m the web editor at\niMasters, one of the largest developer communities in Brazil. I\u00b4d like to talk\nto you about republishing your article at our site. Can you contact me at\nrina.noronha@imasters.com.br?\n\n\n\n\n\n\nBests,\n\n\nRina Noronha\nJournalist \u2013 web editor\nwww.imasters.com.br\nredacao@imasters.com.br\nrina.noronha@imasters.com.br\n+55 27 3327-0320 / +55 27 9973-0700\n\n\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-10-31_18:42:13", "date": "2 weeks ago", "message": "Hi, Mike!<br><br><br><br>I\u2019m the web editor at<br>iMasters, one of the largest developer communities in Brazil. I\u00b4d like to talk<br>to you about republishing your article at our site. Can you contact me at<br>rina.noronha@imasters.com.br?<br><br><br><br><br>Bests,<br><br><br>Rina Noronha<br>Journalist \u2013 web editor<br><a href=\"http://www.imasters.com.br\" rel=\"nofollow\">www.imasters.com.br</a><br>redacao@imasters.com.br<br>rina.noronha@imasters.com.br<br>+55 27 3327-0320 / +55 27 9973-0700<br><br><br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "dd2db4f90127e60b3a3692e619223aee", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "51944251": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I am trying to create a JS object that has a dynamic number of members, which is easy enough to do, but what is not easy is giving those members a dynamic name.  The implementation is I am trying to query a DB with AJAX and whatever the DB returns I am going to put into an array of objects.  I want the members of the objects to have the same name as the field names returned from the database.  Then once I have that, I will need a way of retrieving all the objects and figuring out what their names are.  So an example might be something like...\n\n//xml file created by the database query\n<?xml...>\n<data>\n  <node>\n     <fname>george</fname>\n     <lname>smith</lname>\n  </node>\n  <node>\n     <fname>jane</fname>\n     <lname>doe</lname>\n  </node>\n</data>\n\n// object to hold each <node> tag\nfunction dataRow() {}\n\n//xhr is the XMLHTTPRequest object\nvar xmlobj = xhr.responseXML.getElementsByTagName('data')[0];\nvar retArr = new Array();\n\n// loop through <node> tags\nfor( var x = 0; xmlobj.childNodes.length; x++ )\n{\n    var ret = new dataRow();\n\n    // loop through each individual data element\n    for( var y = 0; xmlobj.childNodes[x].childNodes.length; y++ )\n    {\n       // this is the closest way that I have found to create a dynamic name within a object\n       ret.prototype[xmlobj.childNodes[x].childNodes[y].nodeName] = xmlobj.childNodes[x].childNodes[y].textContent;\n    }\n\n    retArray[x] = ret;\n}", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-05-25_11:48:11", "date": "1 year ago", "message": "I am trying to create a JS object that has a dynamic number of members, which is easy enough to do, but what is not easy is giving those members a dynamic name.  The implementation is I am trying to query a DB with AJAX and whatever the DB returns I am going to put into an array of objects.  I want the members of the objects to have the same name as the field names returned from the database.  Then once I have that, I will need a way of retrieving all the objects and figuring out what their names are.  So an example might be something like...<br><br>//xml file created by the database query<br><br>&lt;data&gt;<br>  &lt;node&gt;<br>     &lt;fname&gt;george&lt;/fname&gt;<br>     &lt;lname&gt;smith&lt;/lname&gt;<br>  &lt;/node&gt;<br>  &lt;node&gt;<br>     &lt;fname&gt;jane&lt;/fname&gt;<br>     &lt;lname&gt;doe&lt;/lname&gt;<br>  &lt;/node&gt;<br>&lt;/data&gt;<br><br>// object to hold each &lt;node&gt; tag<br>function dataRow() {}<br><br>//xhr is the XMLHTTPRequest object<br>var xmlobj = xhr.responseXML.getElementsByTagName('data')[0];<br>var retArr = new Array();<br><br>// loop through &lt;node&gt; tags<br>for( var x = 0; xmlobj.childNodes.length; x++ )<br>{<br>    var ret = new dataRow();<br><br>    // loop through each individual data element<br>    for( var y = 0; xmlobj.childNodes[x].childNodes.length; y++ )<br>    {<br>       // this is the closest way that I have found to create a dynamic name within a object<br>       ret.prototype[xmlobj.childNodes[x].childNodes[y].nodeName] = xmlobj.childNodes[x].childNodes[y].textContent;<br>    }<br><br>    retArray[x] = ret;<br>}&lt;/node&gt;&lt;/node&gt;", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 3, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "a8610b3500597d375c4e720b9a660302", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "77232958": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I think you probably meant that the _latter_ (using a prototype) is more efficient.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-09-13_06:49:22", "date": "1 year ago", "message": "I think you probably meant that the _latter_ (using a prototype) is more efficient.", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": {"username": "yawar_amin", "avatar_url": "http://media.disqus.com/uploads/users/2365/avatar32.jpg", "display_name": "Yawar Amin"}, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 4338618, "depth": 2, "points": 1, "user_key": "twitter-83842639", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "105838911": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "function A()                        // Define super class\n{\n    this.x = 1;\n\tthis.super=this;\n}\n \nA.prototype.DoIt = function()        // Define Method\n {\n    this.x += 1;\n }\n \nB.prototype = new A;                // Define sub-class\nB.prototype.constructor = B;\nfunction B()\n{\n    //A.call(this);                    // Call super-class constructor (if desired)\n    this.y = 2;\n}\n \nB.prototype.DoIt = function()        // Define Method\n{\n\n    A.prototype.DoIt.call(this.super);    // Call super-class method (if desired)\n    this.y += 1;\n}\n \nb = new B;\n\n\ndocument.write((b instanceof A) + ', ' + (b instanceof B) + '<BR/>');\nb.DoIt();\ndocument.write(b.x + ', ' + b.y);\n\ni added a \"super\" in a object then\nalert(b.hasOwnProperty('x')); // false\nb.DoIt();\nalert(b.hasOwnProperty('x')); // still false\nalert(b.x) ; // 2 (updated)\n\nin reality, B have A (and IS not A) ... like say Daniel, javascript isn't java or C languages !", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-12-02_06:22:23", "date": "11 months ago", "message": "function A()                        // Define super class<br>{<br>    this.x = 1;<br>\tthis.super=this;<br>}<br> <br>A.prototype.DoIt = function()        // Define Method<br> {<br>    this.x += 1;<br> }<br> <br>B.prototype = new A;                // Define sub-class<br>B.prototype.constructor = B;<br>function B()<br>{<br>    //A.call(this);                    // Call super-class constructor (if desired)<br>    this.y = 2;<br>}<br> <br>B.prototype.DoIt = function()        // Define Method<br>{<br><br>    A.prototype.DoIt.call(this.super);    // Call super-class method (if desired)<br>    this.y += 1;<br>}<br> <br>b = new B;<br><br><br>document.write((b instanceof A) + ', ' + (b instanceof B) + '<br>');<br>b.DoIt();<br>document.write(b.x + ', ' + b.y);<br><br>i added a \"super\" in a object then<br>alert(b.hasOwnProperty('x')); // false<br>b.DoIt();<br>alert(b.hasOwnProperty('x')); // still false<br>alert(b.x) ; // 2 (updated)<br><br>in reality, B have A (and IS not A) ... like say Daniel, javascript isn't java or C languages !", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 76630684, "depth": 1, "points": 1, "user_key": "368b8ca0973c5bcf340acbb8784b1169", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "45912899": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "this dude has copied your work without any citation of your name\n\nhttp://mahiways.spaces.live.com/blog/cns!6A1F270FEA8CDD8C!292.entry", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-04-21_22:09:46", "date": "1 year ago", "message": "this dude has copied your work without any citation of your name<br><br><a href=\"http://mahiways.spaces.live.com/blog/cns!6A1F270FEA8CDD8C!292.entry\" rel=\"nofollow\">http://mahiways.spaces.live.co...</a>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 24, "user_voted": {"username": "twitter-15157634", "avatar_url": "http://media.disqus.com/uploads/users/163/4487/avatar32.jpg", "display_name": "Jase"}, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 24, "user_key": "f5cc41edfd8944481770838755803522", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "95343941": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "'a' is an object so when you write a.foo =.. you give a new attribute with a new value, and that is what gets printed out.\nYou probably wanted to use one of the functions you declared like: a.setAge(10) and then document.write(a.getAge())\n\nthere are no real setters or getters in javascript as opposed to actionscript, it's just a naming convention in JS.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-09_05:25:44", "date": "1 year ago", "message": "'a' is an object so when you write a.foo =.. you give a new attribute with a new value, and that is what gets printed out.<br>You probably wanted to use one of the functions you declared like: a.setAge(10) and then document.write(a.getAge())<br><br>there are no real setters or getters in javascript as opposed to actionscript, it's just a naming convention in JS.", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 81276568, "depth": 1, "points": 0, "user_key": "4a92b752a1680463bab0da23892e9690", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "319761719": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "\n\nHi, Mike!\nI\u2019m the web editor at iMasters, one of the largest developer communities in\nBrazil. I\u00b4d like to talk to you about republishing your article at our site.\nCan you contact me at rina.noronha@imasters.com.br?\n\nBests,\nRina\n\n\n\u00a0\n\n\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-09-25_16:51:14", "date": "1 month ago", "message": "<br><br>Hi, Mike!<br>I\u2019m the web editor at iMasters, one of the largest developer communities in<br>Brazil. I\u00b4d like to talk to you about republishing your article at our site.<br>Can you contact me at rina.noronha@imasters.com.br?<br><br>Bests,<br>Rina<br><br><br>\u00a0<br><br><br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "dd2db4f90127e60b3a3692e619223aee", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "84770636": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Good article. \n\nI was wondering whether \"B.prototype.constructor = B\" is needed while reading your article, then I saw your comment. I tested the code without this line. It seems to be working fine, even when I test \"b instanceof B\". Here is the code I use.\n\n      function f0()\n      {\n        this.date = \"date 0\";\n        this.time = \"time 0\";\n      }\n\n      function f1()\n      {\n        this.date = \"date 1\";\n      }\n\n      f1.prototype = new f0;\n \n      var d0 = new f1();\n      alert(d0 instanceof f1);\n\nDo I miss anything?", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-10-07_00:55:29", "date": "1 year ago", "message": "Good article. <br><br>I was wondering whether \"B.prototype.constructor = B\" is needed while reading your article, then I saw your comment. I tested the code without this line. It seems to be working fine, even when I test \"b instanceof B\". Here is the code I use.<br><br>      function f0()<br>      {<br>        this.date = \"date 0\";<br>        this.time = \"time 0\";<br>      }<br><br>      function f1()<br>      {<br>        this.date = \"date 1\";<br>      }<br><br>      f1.prototype = new f0;<br> <br>      var d0 = new f1();<br>      alert(d0 instanceof f1);<br><br>Do I miss anything?", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 2392953, "depth": 1, "points": 0, "user_key": "2218af6015ba793bceb8a3af691c301d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "134426445": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Here! Here!  Very well said!\n\nSome people seem quite pedantic about the use of the English language word - \"polymorphism\" - and are quite hung up on one particular programming language's (usually Java) implementation.  Thanks for your eloquent rebuttal - with which I wholeheartedly agree.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-01-25_14:33:59", "date": "10 months ago", "message": "Here! Here!  Very well said!<br><br>Some people seem quite pedantic about the use of the English language word - \"polymorphism\" - and are quite hung up on one particular programming language's (usually Java) implementation.  Thanks for your eloquent rebuttal - with which I wholeheartedly agree.", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 134353830, "depth": 4, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "225666910": {"edited": true, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I have a question. \u00a0Why is it that defining a constructor's prototype before defining the constructor itself is not an error? \u00a0I could never figure out how that works in any reasonable execution model.\n\nfunction Tree(left,value,right) {\n\u00a0 this.left = left;\n\u00a0 this.value = value;\n\u00a0 this.right = right;\n}\nTree.prototype.getNodes = function() {\n\u00a0 return [].concat(\n\u00a0 \u00a0 this.left == null ? [] : this.left.getNodes(),\n\u00a0 \u00a0 [this],\n\u00a0 \u00a0 this.right == null ? [] : this.right.getNodes()\n\u00a0 );\u00a0\n}\nTree.prototype.getRoot = function() {return this}\n\nParentTree.prototype = new Tree;\nfunction ParentTree(left,value,right) {\n\u00a0 Tree.call(this,left,value,right);\n\u00a0 if(left != null) left.parent = this;\n\u00a0 if(right != null) right.parent = this;\n\u00a0 this.parent = null;\n}\nParentTree.prototype.getRoot = function() {\n\u00a0 var node = this;\n\u00a0 while(node.parent != null) node = node.parent;\n\u00a0 return node;\n}\n\nIn this example, I enhanced the \"class\" Tree to include parent properties, thus deriving ParentTree. \u00a0The line\n\u00a0 ParentTree.prototype = new Tree;\nshould result in an error because ParentTree is not yet defined, and yet there is no error. \u00a0Yet if the following lines were omitted, the expected error would indeed be generated. \u00a0I do not understand how there is any execution model in which this phenomenon occurs.\n\nI think the meaning intended by that line is really:\n\u00a0 ParentTree.prototype._proto_ = Tree.prototype; \u00a0// _proto_ here means next link in the prototype chain\nAnd somehow, the runtime interprets it as such, but I do not know the mechanism. \u00a0Where ParentTree is not yet defined, this seems to mean some sort of promise that it will be defined before its execution scope closes; and the error is triggered when that promise is unfulfilled. \u00a0This sounds horribly complicated, and JavaScript could have been made much simpler. \u00a0In fact, this seems a kludge.\n\nThis specs are of no help in this regard, and I consulted them here:\nhttp://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf", "has_replies": false, "vote": false, "votable": true, "last_modified_by": "moderator", "real_date": "2011-06-14_09:06:26", "date": "5 months ago", "message": "I have a question. \u00a0Why is it that defining a constructor's prototype before defining the constructor itself is not an error? \u00a0I could never figure out how that works in any reasonable execution model.<br><br>function Tree(left,value,right) {<br>\u00a0 this.left = left;<br>\u00a0 this.value = value;<br>\u00a0 this.right = right;<br>}<br>Tree.prototype.getNodes = function() {<br>\u00a0 return [].concat(<br>\u00a0 \u00a0 this.left == null ? [] : this.left.getNodes(),<br>\u00a0 \u00a0 [this],<br>\u00a0 \u00a0 this.right == null ? [] : this.right.getNodes()<br>\u00a0 );\u00a0<br>}<br>Tree.prototype.getRoot = function() {return this}<br><br>ParentTree.prototype = new Tree;<br>function ParentTree(left,value,right) {<br>\u00a0 Tree.call(this,left,value,right);<br>\u00a0 if(left != null) left.parent = this;<br>\u00a0 if(right != null) right.parent = this;<br>\u00a0 this.parent = null;<br>}<br>ParentTree.prototype.getRoot = function() {<br>\u00a0 var node = this;<br>\u00a0 while(node.parent != null) node = node.parent;<br>\u00a0 return node;<br>}<br><br>In this example, I enhanced the \"class\" Tree to include parent properties, thus deriving ParentTree. \u00a0The line<br>\u00a0 ParentTree.prototype = new Tree;<br>should result in an error because ParentTree is not yet defined, and yet there is no error. \u00a0Yet if the following lines were omitted, the expected error would indeed be generated. \u00a0I do not understand how there is any execution model in which this phenomenon occurs.<br><br>I think the meaning intended by that line is really:<br>\u00a0 ParentTree.prototype._proto_ = Tree.prototype; \u00a0// _proto_ here means next link in the prototype chain<br>And somehow, the runtime interprets it as such, but I do not know the mechanism. \u00a0Where ParentTree is not yet defined, this seems to mean some sort of promise that it will be defined before its execution scope closes; and the error is triggered when that promise is unfulfilled. \u00a0This sounds horribly complicated, and JavaScript could have been made much simpler. \u00a0In fact, this seems a kludge.<br><br>This specs are of no help in this regard, and I consulted them here:<br><a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\" rel=\"nofollow\">http://www.ecma-international....</a>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "be021a06814a2ab23de93232eed954c9", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "338372959": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "The best article I ever found about Object Oriented JavaScript !", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-10-18_14:36:15", "date": "1 month ago", "message": "The best article I ever found about Object Oriented JavaScript !", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "google-60914c06de70772168f46d8c18014129", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "77232992": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": "1 year ago", "dislikes": 0, "raw_message": "I think this particular example of polymorphism isn't quite stellar, since the methods doIt in A and B are class methods, and seem to affect attribute x of two different objects.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": "author", "real_date": "2010-09-13_06:49:50", "date": "1 year ago", "message": "I think this particular example of polymorphism isn't quite stellar, since the methods doIt in A and B are class methods, and seem to affect attribute x of two different objects.", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 12261455, "depth": 2, "points": 0, "user_key": "twitter-83842639", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "69714291": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "\nBase = {\n\t_new : function() {\n\t\tvar instance = {}\n\t\tfor (var member in this) instance[member] = this[member];\n\t\treturn instance;\n\t},\n\n\tfoo : function() {\n\t\tprint(\"Base.foo: \" + this._x);\n\t},\n\n\t_x : 100\n}\n\nDerived = {\n\t_new : function() {\n\t\tvar instance = Base._new();\n\t\tfor (var member in this) instance[member] = this[member];\n\t\treturn instance;\n\t},\n\n\n\tgoo : function() {\n\t\tprint(\"Derived.goo: \" + this._x);\n\t},\n\n\t_y : 100\n}\n\nvar obj = Derived._new();\n\nobj._x = 200;\nobj.foo();\nobj.goo();\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-08-18_19:24:01", "date": "1 year ago", "message": "<br>Base = {<br>\t_new : function() {<br>\t\tvar instance = {}<br>\t\tfor (var member in this) instance[member] = this[member];<br>\t\treturn instance;<br>\t},<br><br>\tfoo : function() {<br>\t\tprint(\"Base.foo: \" + this._x);<br>\t},<br><br>\t_x : 100<br>}<br><br>Derived = {<br>\t_new : function() {<br>\t\tvar instance = Base._new();<br>\t\tfor (var member in this) instance[member] = this[member];<br>\t\treturn instance;<br>\t},<br><br><br>\tgoo : function() {<br>\t\tprint(\"Derived.goo: \" + this._x);<br>\t},<br><br>\t_y : 100<br>}<br><br>var obj = Derived._new();<br><br>obj._x = 200;<br>obj.foo();<br>obj.goo();<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "2fca53e615069649692c6fed4d0c318d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "2392953": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": "3 years ago", "dislikes": 0, "raw_message": "Without \"B.prototype.constructor = B\", any object created from \"new B()\" will have the wrong \"constructor\" value.  This could come in to play if code is explicitly testing what type of object it is.  For example, \"b instanceof B\" would return false, even though the object was created from \"b = new B();\".", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-09-16_21:26:36", "date": "3 years ago", "message": "Without \"B.prototype.constructor = B\", any object created from \"new B()\" will have the wrong \"constructor\" value.  This could come in to play if code is explicitly testing what type of object it is.  For example, \"b instanceof B\" would return false, even though the object was created from \"b = new B();\".", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 1, "user_voted": {"username": "srus", "avatar_url": "http://media.disqus.com/uploads/users/392/6323/avatar32.jpg", "display_name": "Sergio Rus"}, "num_replies": 9, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "168903041": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "\n\n\nfunction das(){\n  this.x='Mariya';\n  }\n  das.prototype.Ext = function(a){\n  \n    this.x+=  a;\n  }\n  das1.prototype = new das;\n  das1.prototype.constructor = das1;\n  function das1(){\n  \n   das.prototype.Ext.call(this);\n  \n  }\n  t =  new das1;\n  t.Ext(' '+'Dasu');\n\n  document.write((t instanceof das)+'   '+(t instanceof das1));\n\n\n\n  document.write(t.x);\n\n\n\nWhen the above code executed, I get the answer as   \" true true Mariyaundefined Dasu \"\n\n\nThis is unable to find where the problem which gets as \"undefined\"", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-03-21_03:00:35", "date": "8 months ago", "message": "<br><br><br>function das(){<br>  this.x='Mariya';<br>  }<br>  das.prototype.Ext = function(a){<br>  <br>    this.x+=  a;<br>  }<br>  das1.prototype = new das;<br>  das1.prototype.constructor = das1;<br>  function das1(){<br>  <br>   das.prototype.Ext.call(this);<br>  <br>  }<br>  t =  new das1;<br>  t.Ext(' '+'Dasu');<br><br>  document.write((t instanceof das)+'   '+(t instanceof das1));<br><br><br><br>  document.write(t.x);<br><br><br><br>When the above code executed, I get the answer as   \" true true Mariyaundefined Dasu \"<br><br><br>This is unable to find where the problem which gets as \"undefined\"", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "e6fcf2187a73ca4c594a70e79d7c7de8", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "100252551": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "eerh,\nI cannot explicitly understand the last paragraph. \nDo you mean that each of the object instances maintains a copy of its constructor scope?\nAnd what's more,  in your sentence:\nExperiments with a single (shared) reference to a function reveal that they can only reference variables from a single instance of the class.\nWhat dose \"they\" refer to? The copy of each local function?\nCan you show me your experiments code ?\nthx", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-21_10:30:11", "date": "1 year ago", "message": "eerh,<br>I cannot explicitly understand the last paragraph. <br>Do you mean that each of the object instances maintains a copy of its constructor scope?<br>And what's more,  in your sentence:<br>Experiments with a single (shared) reference to a function reveal that they can only reference variables from a single instance of the class.<br>What dose \"they\" refer to? The copy of each local function?<br>Can you show me your experiments code ?<br>thx", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "3d16d3cef7c7898bff69feacebd0ecc2", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "103699848": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Daniel,\nI was just about to ask whether the \"A.call(this)\" was redundant. Your answer is more than satisfactory.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-26_23:56:57", "date": "11 months ago", "message": "Daniel,<br>I was just about to ask whether the \"A.call(this)\" was redundant. Your answer is more than satisfactory.", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 76630684, "depth": 1, "points": 0, "user_key": "twitter-34024308", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "332567435": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "bakwas", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-10-12_08:47:31", "date": "1 month ago", "message": "bakwas", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "8e5d5142fe233937cf064dbdffd55364", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "252817297": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "The link to your blog is dead. Anyway we can get some explanation on how the Namespace.js file works?\n\nI read the comments you put at the top, but I still wasn't able to grasp the concept. Thank you.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-07-15_12:08:41", "date": "4 months ago", "message": "The link to your blog is dead. Anyway we can get some explanation on how the Namespace.js file works?<br><br>I read the comments you put at the top, but I still wasn't able to grasp the concept. Thank you.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "google-091e31eb3b2f427dbbb262c1cd43c4f7", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "300968862": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Great fun with JavaScript OOP", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-09-02_02:49:42", "date": "2 months ago", "message": "Great fun with JavaScript OOP", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "google-5bd53ce8b4b9f549687a28e63229eed4", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "3351972": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "First I want to say thanks for the article, it was quite good. It seems so much of the internet I've seen on javascript is not for programmers.\r\n\r\nI'm quite familiar with the class paradigm in prototype but from what I've seen there's not much about classes in the sense of OOD for jQuery. Care to elaborate or point me in a good piece about the jQuery class paradigm?\r\n\r\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-10-28_18:14:06", "date": "3 years ago", "message": "First I want to say thanks for the article, it was quite good. It seems so much of the internet I've seen on javascript is not for programmers.\n<br>\n<br>I'm quite familiar with the class paradigm in prototype but from what I've seen there's not much about classes in the sense of OOD for jQuery. Care to elaborate or point me in a good piece about the jQuery class paradigm?\n<br>\n<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 2236638, "depth": 1, "points": 1, "user_key": "60d9977186d413497f38c1b0e971b55d", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "134353830": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Having spent a good deal of time in both strongly-typed and duck-typed languages, I'd say that the distinction you're trying to make here is a semantic distinction without a difference. Whether you consider an externalized, compiler-enforced contract (like an interface or base class) definitively 'polymorphic' to the exclusion of dynamic techniques that achieve the same effect at run-time, doesn't really matter, does it? Conceptually it's the same thing, the only *real* difference being that one contract is defined externally, the other is necessarily ad hoc and has no enforcement mechanism, other than hopefully expressive code that communicates the intent of the objects' relationships. That's the nature of dyanmic languages. But so what if the dynamic language programmer choses to articulate this as \"polymorphism\"? Other coders in the same language/codebase/idiom will understand and accept this, given that the code is well-written and expresses the concept adequately. As Dave Thomas points out, one of the first major revelations when working in a dynamice lagnuage like Python, Javascript or Ruby, is that you very, very rarely run into bugs where the object's type was not what the calling code expected it to be. I've written many thousands of lines of dynamic code and I've never had a bug that was the result of mistaken type expectations. The benefits of type safety, imo, are mainly as a kind of built-in unit test (and an overratted one at that) and a great help in code browsing and refactoring. But at runtime it very rarely makes a difference. .    ", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-01-25_11:44:09", "date": "10 months ago", "message": "Having spent a good deal of time in both strongly-typed and duck-typed languages, I'd say that the distinction you're trying to make here is a semantic distinction without a difference. Whether you consider an externalized, compiler-enforced contract (like an interface or base class) definitively 'polymorphic' to the exclusion of dynamic techniques that achieve the same effect at run-time, doesn't really matter, does it? Conceptually it's the same thing, the only *real* difference being that one contract is defined externally, the other is necessarily ad hoc and has no enforcement mechanism, other than hopefully expressive code that communicates the intent of the objects' relationships. That's the nature of dyanmic languages. But so what if the dynamic language programmer choses to articulate this as \"polymorphism\"? Other coders in the same language/codebase/idiom will understand and accept this, given that the code is well-written and expresses the concept adequately. As Dave Thomas points out, one of the first major revelations when working in a dynamice lagnuage like Python, Javascript or Ruby, is that you very, very rarely run into bugs where the object's type was not what the calling code expected it to be. I've written many thousands of lines of dynamic code and I've never had a bug that was the result of mistaken type expectations. The benefits of type safety, imo, are mainly as a kind of built-in unit test (and an overratted one at that) and a great help in code browsing and refactoring. But at runtime it very rarely makes a difference. .", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 2, "user_voted": {"username": "yawar_amin", "avatar_url": "http://media.disqus.com/uploads/users/2365/avatar32.jpg", "display_name": "Yawar Amin"}, "num_replies": 2, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 90195767, "depth": 3, "points": 2, "user_key": "5756f9ea3fa0d1df985d7e2d4b83fa8a", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "14433722": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Wow, good question and great answer. I had no idea that Polymorphism had slightly different definitions with the same underlying them for dynamic and static languages. Both your article and answers to comments are very useful Mr. Koss. Thank you for donating so much of your valuable time to the rest of us!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-08-07_11:16:33", "date": "2 years ago", "message": "Wow, good question and great answer. I had no idea that Polymorphism had slightly different definitions with the same underlying them for dynamic and static languages. Both your article and answers to comments are very useful Mr. Koss. Thank you for donating so much of your valuable time to the rest of us!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 4, "user_voted": {"username": "mckoss", "avatar_url": "http://media.disqus.com/uploads/users/4/3100/avatar32.jpg", "display_name": "mckoss"}, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 12261455, "depth": 2, "points": 4, "user_key": "b5b323dd48fd103e522c88dd52c5ad31", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "4339132": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I think I mis-spoke on the example.  If you do this:\r\n\r\nx = new B;\r\ndocument.write(x.constructor == B) \r\n\r\nit will return false instead of true.  It's pretty minor, but if there is some code that is doing some inspection, or want's to clone the object by calling it's constructor, it will have a reference the superclasses constructore instead of its own.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-12-11_20:45:56", "date": "2 years ago", "message": "I think I mis-spoke on the example.  If you do this:\n<br>\n<br>x = new B;\n<br>document.write(x.constructor == B) \n<br>\n<br>it will return false instead of true.  It's pretty minor, but if there is some code that is doing some inspection, or want's to clone the object by calling it's constructor, it will have a reference the superclasses constructore instead of its own.", "approved": true, "is_last_child": false, "author_is_founder": true, "can_reply": true, "likes": 2, "user_voted": {"username": "yawar_amin", "avatar_url": "http://media.disqus.com/uploads/users/2365/avatar32.jpg", "display_name": "Yawar Amin"}, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": 3921644, "depth": 2, "points": 2, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "211857343": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "an easy way to regard polymorphism is simply to look at it in terms of Liskov's Substitution principle. Polymorphism would be when two different objects can be substituted for eachother. As an example, imagine you had a javascript object designed for doing Ajax in firefox and one for ajax in IE. both have the function getJson(url){}. They are interchangable in the code that uses them but the implementations are different.", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-05-25_23:05:36", "date": "5 months ago", "message": "an easy way to regard polymorphism is simply to look at it in terms of Liskov's Substitution principle. Polymorphism would be when two different objects can be substituted for eachother. As an example, imagine you had a javascript object designed for doing Ajax in firefox and one for ajax in IE. both have the function getJson(url){}. They are interchangable in the code that uses them but the implementations are different.", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 12261455, "depth": 2, "points": 0, "user_key": "facebook-559295050", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "123997129": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "good job.....", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-01-04_15:01:54", "date": "10 months ago", "message": "good job.....", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 4339132, "depth": 3, "points": 1, "user_key": "b69ed17ba98e712675076c3e99a0cd41", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "313744845": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Sorry, lost my code formatting. <br/>\n<br/>\n//declare variable in function scope:<br/>\nvar x = 7;<br/>\n//now make it 'public', ie externally visible<br/>\nthis.x = x;<br/>\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2011-09-17_05:00:25", "date": "2 months ago", "message": "Sorry, lost my code formatting. <br><br><br><br>//declare variable in function scope:<br><br>var x = 7;<br><br>//now make it 'public', ie externally visible<br><br>this.x = x;<br><br>", "approved": true, "is_last_child": true, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 313744469, "depth": 1, "points": 0, "user_key": "c720c0d32ffe449bf8efcae2d822333c", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "95141844": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "I had problems with functions of a class calling each other so I did something like this:\nfunction MyClass(){\n var _this; //or: var _this = this /*if you already need to use a function*/\n this.str = \"Hello\";\n function func(){ //these don't get copied, just like prototype\n  _this.str += \" World\";\n }\nMyClass.prototype.method = function(){\n _this = this; //you need to do this in all prototype methods\n func();\n }\n}\nvar mc = new MyClass();\nmc.method(); //mc.str == \"Hello World\"", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-08_14:25:09", "date": "1 year ago", "message": "I had problems with functions of a class calling each other so I did something like this:<br>function MyClass(){<br> var _this; //or: var _this = this /*if you already need to use a function*/<br> this.str = \"Hello\";<br> function func(){ //these don't get copied, just like prototype<br>  _this.str += \" World\";<br> }<br>MyClass.prototype.method = function(){<br> _this = this; //you need to do this in all prototype methods<br> func();<br> }<br>}<br>var mc = new MyClass();<br>mc.method(); //mc.str == \"Hello World\"", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "4a92b752a1680463bab0da23892e9690", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "58308054": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "var obj;\nobj.myProp = 'a';\nvar x = obj['myProp'];\n\nvoila, dynamic propeties", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-06-23_16:42:39", "date": "1 year ago", "message": "var obj;<br>obj.myProp = 'a';<br>var x = obj['myProp'];<br><br>voila, dynamic propeties", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 2, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 51944251, "depth": 1, "points": 0, "user_key": "3ae4a0b0647511a15dea9d8bd30b1ed5", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "12986447": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "// Why this is not working?\r\n\r\n// Object.prototype.objSayHello = function(){alert('Hello,from OBJECT prototype')};   // this one works as I expected, when objSayHello()\r\n   Object.prototype ={objSayHello: function(){alert('Hello,from OBJECT prototype')}}; // NOT working !\r\n\r\n   objSayHello();\r\n// Please email me if you know,  thank you!    cr7cr8@126.com", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-07-21_00:08:10", "date": "2 years ago", "message": "// Why this is not working?\n<br>\n<br>// Object.prototype.objSayHello = function(){alert('Hello,from OBJECT prototype')};   // this one works as I expected, when objSayHello()\n<br>   Object.prototype ={objSayHello: function(){alert('Hello,from OBJECT prototype')}}; // NOT working !\n<br>\n<br>   objSayHello();\n<br>// Please email me if you know,  thank you!    cr7cr8@126.com", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 2, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 2, "user_key": "aacv", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "85117415": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Just wanted to say thanks for your great explanation of OO JavaScript. After I read the article and started coding, I converted some JS to a class and had it doing what I wanted within and hour. \n\nCheers!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-10-08_00:34:32", "date": "1 year ago", "message": "Just wanted to say thanks for your great explanation of OO JavaScript. After I read the article and started coding, I converted some JS to a class and had it doing what I wanted within and hour. <br><br>Cheers!", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 1, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": false, "parent_post_id": null, "depth": 0, "points": 0, "user_key": "b8ef62509b4179b2d1b0cf0fef8642f8", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "12243945": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "This tutorial is very good. Many thanks for the effort but\u2026 I don't understand the example of Polymorphism. You say: \"Polymorphism is achieved by simply having different object classes implement a collection of methods that use the same names. Then, a caller, need just use the correctly named function property to invoke the appropriate function for each object type\" \u2026 but the polymorphism ( in Java, Delphi, and others OOP languages ) has methods with the same name between a class and a superclass. In the example, the method doIt() exists in a different classes ( class A and class B ) and they casually have the same name ( doIt ), I don't see the polymorphism. The polymorphism in Java ( by example ) is a little more complex ( http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming ).\r\n\r\nThanks\r\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-07-07_03:47:20", "date": "2 years ago", "message": "This tutorial is very good. Many thanks for the effort but\u2026 I don't understand the example of Polymorphism. You say: \"Polymorphism is achieved by simply having different object classes implement a collection of methods that use the same names. Then, a caller, need just use the correctly named function property to invoke the appropriate function for each object type\" \u2026 but the polymorphism ( in Java, Delphi, and others OOP languages ) has methods with the same name between a class and a superclass. In the example, the method doIt() exists in a different classes ( class A and class B ) and they casually have the same name ( doIt ), I don't see the polymorphism. The polymorphism in Java ( by example ) is a little more complex ( <a href=\"http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming\" rel=\"nofollow\">http://en.wikipedia.org/wiki/P...</a> ).\n<br>\n<br>Thanks\n<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 4, "user_voted": null, "num_replies": 10, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 4, "user_key": "1a6f020e6119d4eed5a34849ee8938ee", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "17755117": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "can any one send me a program in java that is associated with OOP...I need atleast 1 example that works\r\n", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-09-28_23:17:44", "date": "2 years ago", "message": "can any one send me a program in java that is associated with OOP...I need atleast 1 example that works\n<br>", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "anonymous41", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "15700465": {"edited": false, "author_is_moderator": false, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Its interesting................\r\nHow to inherit a class present in the head of script into div class present in the body.....", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2009-09-01_06:25:54", "date": "2 years ago", "message": "Its interesting................\n<br>How to inherit a class present in the head of script into div class present in the body.....", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "vikram12", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "96588274": {"edited": false, "author_is_moderator": true, "from_request_user": false, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "My pleasure.  Thanks for your note!", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2010-11-12_12:46:53", "date": "1 year ago", "message": "My pleasure.  Thanks for your note!", "approved": true, "is_last_child": true, "author_is_founder": true, "can_reply": true, "likes": 0, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": true, "has_been_anonymized": false, "highlighted": false, "parent_post_id": 96486068, "depth": 1, "points": 0, "user_key": "mckoss", "author_is_creator": true, "email": "", "killed": false, "is_realtime": false}, "2231805": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Good piece. I really appreciate it. I have been looking for something like this for a long time...Thank you. \r\n-V", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-09-08_12:08:46", "date": "3 years ago", "message": "Good piece. I really appreciate it. I have been looking for something like this for a long time...Thank you. \n<br>-V", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 2, "user_voted": {"username": "satya61229", "avatar_url": "http://media.disqus.com/uploads/users/84/6290/avatar32.jpg", "display_name": "Satya Prakash"}, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 2, "user_key": "316418f6d95203a3c5470bd04e9e5545", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}, "2390526": {"edited": false, "author_is_moderator": false, "from_request_user": null, "up_voted": false, "can_edit": false, "ip": "", "last_modified_date": null, "dislikes": 0, "raw_message": "Thanks a lot. I've a question though, what's the significance of \"B.prototype.constructor = B;\"? (I tried removing this line from the sample code but didn't see any difference in the results.)", "has_replies": false, "vote": false, "votable": true, "last_modified_by": null, "real_date": "2008-09-16_17:48:01", "date": "3 years ago", "message": "Thanks a lot. I've a question though, what's the significance of \"B.prototype.constructor = B;\"? (I tried removing this line from the sample code but didn't see any difference in the results.)", "approved": true, "is_last_child": false, "author_is_founder": false, "can_reply": true, "likes": 1, "user_voted": null, "num_replies": 0, "down_voted": false, "is_first_child": false, "has_been_anonymized": false, "highlighted": null, "parent_post_id": null, "depth": 0, "points": 1, "user_key": "186a78aca10c46955dc73d98f84a3df8", "author_is_creator": false, "email": "", "killed": false, "is_realtime": false}}, "ordered_posts": [45912899, 70444772, 313744469, 313744845, 65964563, 72302200, 72302378, 76181514, 76630684, 105838911, 105892113, 103699848, 206079801, 207217084, 168905991, 303736972, 12243945, 12261455, 14433722, 80924745, 211857343, 90195767, 134353830, 134426445, 134619163, 90247335, 77232992, 111784090, 143153762, 96486068, 96588274, 84789625, 103695001, 12986447, 50196239, 56609575, 51944251, 58308054, 76215951, 80793833, 2231805, 20018197, 18395448, 17755117, 15700465, 4308762, 4308247, 4338618, 77232958, 3001605, 2392953, 4950779, 15344791, 16170677, 142092536, 143229117, 84770636, 3921644, 4339132, 123997129, 2390526, 2236638, 3351972, 3396308, 8253564, 359922345, 352311610, 338372959, 332567435, 324655304, 319761719, 300968862, 264690218, 264688374, 252817297, 252792908, 252583450, 234762507, 225666910, 303734578, 214728544, 211087607, 207220489, 175520898, 168903041, 124883155, 124172898, 109068996, 101250234, 143153856, 100252551, 100864035, 95141844, 85117415, 96588000, 81276568, 95343941, 80539426, 69714291, 51517542], "realtime_enabled": false, "ready": true, "mediaembed": [], "has_more_reactions": false, "realtime_paused": false, "integration": {"receiver_url": "", "hide_user_votes": false, "reply_position": false, "disqus_logo": false}, "highlighted": {}, "reactions_start": 0, "media_url": "http://mediacdn.disqus.com/1321567697", "users": {"twitter-125809736": {"username": "twitter-125809736", "tumblr": "", "about": "", "display_name": "Andrei Zharau", "url": "http://disqus.com/twitter-125809736/", "registered": true, "remote_id": "125809736", "linkedin": "", "blog": "http://twitter.com/zharau", "remote_domain": 2, "points": 1, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/624/7255/avatar32.jpg?1281549414", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "http://twitter.com/zharau", "remote_domain_name": "Twitter"}, "316418f6d95203a3c5470bd04e9e5545": {"username": "Vamshee", "tumblr": "", "about": "", "display_name": "Vamshee", "url": "http://disqus.com/guest/316418f6d95203a3c5470bd04e9e5545/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "satya61229": {"username": "satya61229", "tumblr": "", "about": "Web Enthusiast", "display_name": "Satya Prakash", "url": "http://disqus.com/satya61229/", "registered": true, "remote_id": null, "linkedin": "", "blog": "http://www.satya-weblog.com", "remote_domain": "", "points": 46, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/84/6290/avatar32.jpg?1321097575", "delicious": "", "is_remote": false, "verified": true, "flickr": "", "twitter": "", "remote_domain_name": ""}, "shake178": {"username": "shake178", "tumblr": "", "about": "", "display_name": "shake178", "url": "http://disqus.com/shake178/", "registered": true, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": 2, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "01a1e23d3d8b475d57023a13e55ff7aa": {"username": "blah", "tumblr": "", "about": "", "display_name": "blah", "url": "http://disqus.com/guest/01a1e23d3d8b475d57023a13e55ff7aa/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "ddad0acf5377ae98a62e88695d37c1f7": {"username": "phani", "tumblr": "", "about": "", "display_name": "phani", "url": "http://disqus.com/guest/ddad0acf5377ae98a62e88695d37c1f7/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "4a92b752a1680463bab0da23892e9690": {"username": "Nekdolan", "tumblr": "", "about": "", "display_name": "Nekdolan", "url": "http://disqus.com/guest/4a92b752a1680463bab0da23892e9690/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "65e7ceb62ac89533f33933b41a2a0fdf": {"username": "Bill", "tumblr": "", "about": "", "display_name": "Bill", "url": "http://disqus.com/guest/65e7ceb62ac89533f33933b41a2a0fdf/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "c7b7584facc4bb3844860a0e50e9ff20": {"username": "Rfojta", "tumblr": "", "about": "", "display_name": "Rfojta", "url": "http://disqus.com/guest/c7b7584facc4bb3844860a0e50e9ff20/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "e75091aa8f52392fb417bc4609b19e9a": {"username": "Aks", "tumblr": "", "about": "", "display_name": "Aks", "url": "http://disqus.com/guest/e75091aa8f52392fb417bc4609b19e9a/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "384eae2c6acc7dd2dadcfe053dc27701": {"username": "Ratstur", "tumblr": "", "about": "", "display_name": "Ratstur", "url": "http://disqus.com/guest/384eae2c6acc7dd2dadcfe053dc27701/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "8e5d5142fe233937cf064dbdffd55364": {"username": "Hamid", "tumblr": "", "about": "", "display_name": "Hamid", "url": "http://disqus.com/guest/8e5d5142fe233937cf064dbdffd55364/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "3ae4a0b0647511a15dea9d8bd30b1ed5": {"username": "Guest", "tumblr": "", "about": "", "display_name": "Guest", "url": "http://disqus.com/guest/3ae4a0b0647511a15dea9d8bd30b1ed5/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "3d6b5d908aa4c4c777823d9775d0e753": {"username": "yuan", "tumblr": "", "about": "", "display_name": "yuan", "url": "http://disqus.com/guest/3d6b5d908aa4c4c777823d9775d0e753/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "facebook-559295050": {"username": "facebook-559295050", "tumblr": "", "about": "", "display_name": "Jennifer Peckham", "url": "http://disqus.com/facebook-559295050/", "registered": true, "remote_id": "559295050", "linkedin": "", "blog": "http://www.facebook.com/profile.php?id=559295050", "remote_domain": 1, "points": 1, "facebook": "http://www.facebook.com/profile.php?id=559295050", "avatar": "http://mediacdn.disqus.com/uploads/users/1145/6440/avatar32.jpg?1306379135", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": "Facebook"}, "5756f9ea3fa0d1df985d7e2d4b83fa8a": {"username": "Davsims", "tumblr": "", "about": "", "display_name": "Davsims", "url": "http://disqus.com/guest/5756f9ea3fa0d1df985d7e2d4b83fa8a/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/24/6228/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "e6fcf2187a73ca4c594a70e79d7c7de8": {"username": "S Mariyadasu", "tumblr": "", "about": "", "display_name": "S Mariyadasu", "url": "http://disqus.com/guest/e6fcf2187a73ca4c594a70e79d7c7de8/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "8e8d8f775f5f4107d4a02feded155d7d": {"username": "hhh", "tumblr": "", "about": "", "display_name": "hhh", "url": "http://disqus.com/guest/8e8d8f775f5f4107d4a02feded155d7d/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "aacv": {"username": "aacv", "tumblr": "", "about": "", "display_name": "aacv", "url": "http://disqus.com/aacv/", "registered": true, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": 3, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "vikram12": {"username": "vikram12", "tumblr": "", "about": "", "display_name": "vikram12", "url": "http://disqus.com/vikram12/", "registered": true, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": 2, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": true, "flickr": "", "twitter": "", "remote_domain_name": ""}, "a4934482eb207333529f970f8209524c": {"username": "hudz", "tumblr": "", "about": "", "display_name": "hudz", "url": "http://disqus.com/guest/a4934482eb207333529f970f8209524c/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/232/4886/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "92bdb33bcea35492780d5ca9a0347205": {"username": "George Garchagudashvili", "tumblr": "", "about": "", "display_name": "George Garchagudashvili", "url": "http://disqus.com/guest/92bdb33bcea35492780d5ca9a0347205/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/985/8306/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "twitter-15454506": {"username": "twitter-15454506", "tumblr": "", "about": "", "display_name": "\u0245rnaud Meuret", "url": "http://disqus.com/twitter-15454506/", "registered": true, "remote_id": "15454506", "linkedin": "", "blog": "http://twitter.com/ameuret", "remote_domain": 2, "points": 1, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/553/3318/avatar32.jpg?1281549414", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "http://twitter.com/ameuret", "remote_domain_name": "Twitter"}, "google-091e31eb3b2f427dbbb262c1cd43c4f7": {"username": "google-091e31eb3b2f427dbbb262c1cd43c4f7", "tumblr": "", "about": "", "display_name": "Amin El Naggar", "url": "http://disqus.com/google-091e31eb3b2f427dbbb262c1cd43c4f7/", "registered": true, "remote_id": "091e31eb3b2f427dbbb262c1cd43c4f7", "linkedin": "", "blog": "", "remote_domain": 6, "points": 2, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/1217/6724/avatar32.jpg?1310743723", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": "Google"}, "58be7bd668115bd8bf70dc54f2a7f8b5": {"username": "Bikash", "tumblr": "", "about": "", "display_name": "Bikash", "url": "http://disqus.com/guest/58be7bd668115bd8bf70dc54f2a7f8b5/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "db0ffc046fd218d4a2a0d7314e6c1d98": {"username": "SasQ", "tumblr": "", "about": "", "display_name": "SasQ", "url": "http://disqus.com/guest/db0ffc046fd218d4a2a0d7314e6c1d98/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "1a6f020e6119d4eed5a34849ee8938ee": {"username": "Juan", "tumblr": "", "about": "", "display_name": "Juan", "url": "http://disqus.com/guest/1a6f020e6119d4eed5a34849ee8938ee/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "d3c5d42b6e3e4c682a8b454fa3c32d7b": {"username": "Joe", "tumblr": "", "about": "", "display_name": "Joe", "url": "http://disqus.com/guest/d3c5d42b6e3e4c682a8b454fa3c32d7b/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "606e97f6a9c729cabe2708b360efd031": {"username": "Sandesh", "tumblr": "", "about": "", "display_name": "Sandesh", "url": "http://disqus.com/guest/606e97f6a9c729cabe2708b360efd031/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "30cf48563e8257ab1ecfd0b7fd17037a": {"username": "Ed7991", "tumblr": "", "about": "", "display_name": "Ed7991", "url": "http://disqus.com/guest/30cf48563e8257ab1ecfd0b7fd17037a/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "368b8ca0973c5bcf340acbb8784b1169": {"username": "bogs", "tumblr": "", "about": "", "display_name": "bogs", "url": "http://disqus.com/guest/368b8ca0973c5bcf340acbb8784b1169/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "327f7aa4a8ccf5b2dbee4cb2536a86f6": {"username": "Bouguerra", "tumblr": "", "about": "", "display_name": "Bouguerra", "url": "http://disqus.com/guest/327f7aa4a8ccf5b2dbee4cb2536a86f6/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "eb52e5eb43c15d9588a161d47a700303": {"username": "Chad", "tumblr": "", "about": "", "display_name": "Chad", "url": "http://disqus.com/guest/eb52e5eb43c15d9588a161d47a700303/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "eb701996318d93b638fde64c0464d1ca": {"username": "Dannsoon", "tumblr": "", "about": "", "display_name": "Dannsoon", "url": "http://disqus.com/guest/eb701996318d93b638fde64c0464d1ca/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "39795544cc5e828b0fa36972909b3578": {"username": "bram", "tumblr": "", "about": "", "display_name": "bram", "url": "http://disqus.com/guest/39795544cc5e828b0fa36972909b3578/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "anonymous41": {"username": "anonymous41", "tumblr": "", "about": "", "display_name": "anonymous41", "url": "http://disqus.com/anonymous41/", "registered": true, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": 2, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "dd2db4f90127e60b3a3692e619223aee": {"username": "Rina Noronha", "tumblr": "", "about": "", "display_name": "Rina Noronha", "url": "http://disqus.com/guest/dd2db4f90127e60b3a3692e619223aee/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "c720c0d32ffe449bf8efcae2d822333c": {"username": "lee", "tumblr": "", "about": "", "display_name": "lee", "url": "http://disqus.com/guest/c720c0d32ffe449bf8efcae2d822333c/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "robertmarkbram": {"username": "robertmarkbram", "tumblr": "robertmarkbram", "about": "", "display_name": "robertmarkbram", "url": "http://disqus.com/robertmarkbram/", "registered": true, "remote_id": null, "linkedin": "pub/2/903/644", "blog": "", "remote_domain": "", "points": 28, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/4/2221/avatar32.jpg?1281549414", "delicious": "RobertMarkBram", "is_remote": false, "verified": true, "flickr": "", "twitter": "", "remote_domain_name": ""}, "b5b323dd48fd103e522c88dd52c5ad31": {"username": "linjava", "tumblr": "", "about": "", "display_name": "linjava", "url": "http://disqus.com/guest/b5b323dd48fd103e522c88dd52c5ad31/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/259/8592/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "1f5152acb1550727084f69620eb2491d": {"username": "Boone711", "tumblr": "", "about": "", "display_name": "Boone711", "url": "http://disqus.com/guest/1f5152acb1550727084f69620eb2491d/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "google-5bd53ce8b4b9f549687a28e63229eed4": {"username": "google-5bd53ce8b4b9f549687a28e63229eed4", "tumblr": "", "about": "", "display_name": "Kishore Mylavarapu", "url": "http://disqus.com/google-5bd53ce8b4b9f549687a28e63229eed4/", "registered": true, "remote_id": "5bd53ce8b4b9f549687a28e63229eed4", "linkedin": "", "blog": "", "remote_domain": 6, "points": 1, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/1633/5197/avatar32.jpg?1314946174", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": "Google"}, "f3c52e5ef3d2b471d0ef51c66c21d10c": {"username": "David", "tumblr": "", "about": "", "display_name": "David", "url": "http://disqus.com/guest/f3c52e5ef3d2b471d0ef51c66c21d10c/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/646/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "f5d5d2174187df8ca5d1b4d1a70f8f7f": {"username": "Grant", "tumblr": "", "about": "", "display_name": "Grant", "url": "http://disqus.com/guest/f5d5d2174187df8ca5d1b4d1a70f8f7f/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/1160/237/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "60d9977186d413497f38c1b0e971b55d": {"username": "phatlikebudda", "tumblr": "", "about": "", "display_name": "phatlikebudda", "url": "http://disqus.com/guest/60d9977186d413497f38c1b0e971b55d/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "cacd77cee3090752fab46ad42a4d2f42": {"username": "Bill", "tumblr": "", "about": "", "display_name": "Bill", "url": "http://disqus.com/guest/cacd77cee3090752fab46ad42a4d2f42/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "d040fce39447a95bdbb11720b0d86d8f": {"username": "Voleynik", "tumblr": "", "about": "", "display_name": "Voleynik", "url": "http://disqus.com/guest/d040fce39447a95bdbb11720b0d86d8f/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "da92b40656aa363cdf77e74797eef0ef": {"username": "alex", "tumblr": "", "about": "", "display_name": "alex", "url": "http://disqus.com/guest/da92b40656aa363cdf77e74797eef0ef/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "twitter-15157634": {"username": "twitter-15157634", "tumblr": "", "about": "", "display_name": "Jase", "url": "http://disqus.com/twitter-15157634/", "registered": true, "remote_id": "15157634", "linkedin": "", "blog": "http://twitter.com/captain_beef", "remote_domain": 2, "points": 1, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/163/4487/avatar32.jpg?1263772391", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "http://twitter.com/captain_beef", "remote_domain_name": "Twitter"}, "Keysle": {"username": "Keysle", "tumblr": "", "about": "Programming, Philosophy, Social Structure", "display_name": "Keysle", "url": "http://disqus.com/Keysle/", "registered": true, "remote_id": null, "linkedin": "", "blog": "http://Keysle.com/", "remote_domain": "", "points": 47, "facebook": "http://www.facebook.com/keysle.sorm", "avatar": "http://mediacdn.disqus.com/uploads/users/218/2207/avatar32.jpg?1320653752", "delicious": "", "is_remote": false, "verified": true, "flickr": "", "twitter": "http://twitter.com/KyleAdimis", "remote_domain_name": ""}, "36f7ac943f58da8554cf331110f3305d": {"username": "Joaqu\u00edn L. Robles", "tumblr": "", "about": "", "display_name": "Joaqu\u00edn L. Robles", "url": "http://disqus.com/guest/36f7ac943f58da8554cf331110f3305d/", "registered": false, "remote_id": null, "linkedin": "", "blog": "http://www.reweb.com.ar", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/87/2963/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "d9204accfc4925409862ff3ab98ce6b1": {"username": "Senthil", "tumblr": "", "about": "", "display_name": "Senthil", "url": "http://disqus.com/guest/d9204accfc4925409862ff3ab98ce6b1/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "google-60914c06de70772168f46d8c18014129": {"username": "google-60914c06de70772168f46d8c18014129", "tumblr": "", "about": "", "display_name": "Pawankumar Jajara", "url": "http://disqus.com/google-60914c06de70772168f46d8c18014129/", "registered": true, "remote_id": "60914c06de70772168f46d8c18014129", "linkedin": "", "blog": "", "remote_domain": 6, "points": 3, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/1765/1771/avatar32.jpg?1318962975", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": "Google"}, "mckoss": {"username": "mckoss", "tumblr": "", "about": "Launch Director, StartPad.org\r\nHead Cheerleader, Faves.com", "display_name": "mckoss", "url": "http://disqus.com/mckoss/", "registered": true, "remote_id": null, "linkedin": "", "blog": "http://faves.com/users/mike", "remote_domain": "", "points": 80, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/4/3100/avatar32.jpg?1281549414", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "http://twitter.com/mckoss", "remote_domain_name": ""}, "3f1e95089de9cdf3f6cb328ea40d0e55": {"username": "Shaked", "tumblr": "", "about": "", "display_name": "Shaked", "url": "http://disqus.com/guest/3f1e95089de9cdf3f6cb328ea40d0e55/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "2218af6015ba793bceb8a3af691c301d": {"username": "Yiliang", "tumblr": "", "about": "", "display_name": "Yiliang", "url": "http://disqus.com/guest/2218af6015ba793bceb8a3af691c301d/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "b8ef62509b4179b2d1b0cf0fef8642f8": {"username": "Andrew", "tumblr": "", "about": "", "display_name": "Andrew", "url": "http://disqus.com/guest/b8ef62509b4179b2d1b0cf0fef8642f8/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/1207/2931/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "186a78aca10c46955dc73d98f84a3df8": {"username": "Welkin", "tumblr": "", "about": "", "display_name": "Welkin", "url": "http://disqus.com/guest/186a78aca10c46955dc73d98f84a3df8/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "b69ed17ba98e712675076c3e99a0cd41": {"username": "xxxxx", "tumblr": "", "about": "", "display_name": "xxxxx", "url": "http://disqus.com/guest/b69ed17ba98e712675076c3e99a0cd41/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "a8610b3500597d375c4e720b9a660302": {"username": "Ryan", "tumblr": "", "about": "", "display_name": "Ryan", "url": "http://disqus.com/guest/a8610b3500597d375c4e720b9a660302/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "3d16d3cef7c7898bff69feacebd0ecc2": {"username": "Rek", "tumblr": "", "about": "", "display_name": "Rek", "url": "http://disqus.com/guest/3d16d3cef7c7898bff69feacebd0ecc2/", "registered": false, "remote_id": null, "linkedin": "", "blog": "https://guangxin.name/", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/1458/7114/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "2fca53e615069649692c6fed4d0c318d": {"username": "George S.", "tumblr": "", "about": "", "display_name": "George S.", "url": "http://disqus.com/guest/2fca53e615069649692c6fed4d0c318d/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "timacheson": {"username": "timacheson", "tumblr": "", "about": "Tech lover", "display_name": "Tim Acheson", "url": "http://disqus.com/timacheson/", "registered": true, "remote_id": null, "linkedin": "", "blog": "http://www.timacheson.com/", "remote_domain": "", "points": 1531, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/49/2444/avatar32.jpg?1288272556", "delicious": "", "is_remote": false, "verified": true, "flickr": "", "twitter": "", "remote_domain_name": ""}, "1388a065507dbd77956c31de3bdc1842": {"username": "prad", "tumblr": "", "about": "", "display_name": "prad", "url": "http://disqus.com/guest/1388a065507dbd77956c31de3bdc1842/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "twitter-34024308": {"username": "twitter-34024308", "tumblr": "", "about": "", "display_name": "Saad Malik", "url": "http://disqus.com/twitter-34024308/", "registered": true, "remote_id": "34024308", "linkedin": "", "blog": "http://twitter.com/SaaMalik", "remote_domain": 2, "points": 1, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/559/5288/avatar32.jpg?1281549414", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "http://twitter.com/SaaMalik", "remote_domain_name": "Twitter"}, "danielearwicker": {"username": "danielearwicker", "tumblr": "", "about": "Honestly, I am not as grumpy as my comments make me seem.", "display_name": "Daniel Earwicker", "url": "http://disqus.com/danielearwicker/", "registered": true, "remote_id": null, "linkedin": "", "blog": "http://www.earwicker.com", "remote_domain": "", "points": 2024, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/99/2416/avatar32.jpg?1321905681", "delicious": "", "is_remote": false, "verified": true, "flickr": "", "twitter": "", "remote_domain_name": ""}, "twitter-83842639": {"username": "twitter-83842639", "tumblr": "", "about": "", "display_name": "Mahesh Jagadeesan", "url": "http://disqus.com/twitter-83842639/", "registered": true, "remote_id": "83842639", "linkedin": "", "blog": "http://twitter.com/maheshjag", "remote_domain": 2, "points": 2, "facebook": "", "avatar": "http://mediacdn.disqus.com/uploads/users/431/8971/avatar32.jpg?1307709814", "delicious": "", "is_remote": true, "verified": false, "flickr": "", "twitter": "http://twitter.com/maheshjag", "remote_domain_name": "Twitter"}, "be021a06814a2ab23de93232eed954c9": {"username": "jasonc65", "tumblr": "", "about": "", "display_name": "jasonc65", "url": "http://disqus.com/guest/be021a06814a2ab23de93232eed954c9/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "f5cc41edfd8944481770838755803522": {"username": "honesty", "tumblr": "", "about": "", "display_name": "honesty", "url": "http://disqus.com/guest/f5cc41edfd8944481770838755803522/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}, "26bdfd0c6b81a40b0209a0f67fa8f6bb": {"username": "jayesh", "tumblr": "", "about": "", "display_name": "jayesh", "url": "http://disqus.com/guest/26bdfd0c6b81a40b0209a0f67fa8f6bb/", "registered": false, "remote_id": null, "linkedin": "", "blog": "", "remote_domain": "", "points": null, "facebook": "", "avatar": "http://media.disqus.com/uploads/anonusers/701/7972/avatar32.jpg", "delicious": "", "is_remote": false, "verified": false, "flickr": "", "twitter": "", "remote_domain_name": ""}}, "user_unapproved": {}, "messagesx": {"count": 0, "unread": []}, "thread": {"voters_count": 5, "offset_posts": 0, "slug": "object_oriented_programming_in_javascript", "paginate": false, "num_pages": 2, "days_alive": 0, "moderate_none": false, "voters": {"gregorynicholas": {"url": "http://disqus.com/gregorynicholas/", "username": "gregorynicholas", "is_moderator": false, "avatar": "http://mediacdn.disqus.com/uploads/users/259/8901/avatar32.jpg?1321067005", "name": "Gregory Nicholas"}, "google-1fcdd7236853ae696fb4d52354da126e": {"url": "http://disqus.com/google-1fcdd7236853ae696fb4d52354da126e/", "username": "google-1fcdd7236853ae696fb4d52354da126e", "is_moderator": false, "avatar": "http://mediacdn.disqus.com/uploads/users/1428/6574/avatar32.jpg?1311234632", "name": "L\u00ea Vi\u1ec7t Quang"}, "google-5bd53ce8b4b9f549687a28e63229eed4": {"url": "http://disqus.com/google-5bd53ce8b4b9f549687a28e63229eed4/", "username": "google-5bd53ce8b4b9f549687a28e63229eed4", "is_moderator": false, "avatar": "http://mediacdn.disqus.com/uploads/users/1633/5197/avatar32.jpg?1314946174", "name": "Kishore Mylavarapu"}, "sztef": {"url": "http://disqus.com/sztef/", "username": "sztef", "is_moderator": false, "avatar": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "name": "sztef"}, "yawar_amin": {"url": "http://disqus.com/yawar_amin/", "username": "yawar_amin", "is_moderator": false, "avatar": "http://mediacdn.disqus.com/uploads/users/2365/avatar32.jpg?1321726009", "name": "Yawar Amin"}}, "total_posts": 147, "realtime_paused": true, "queued": false, "pagination_type": "append", "user_vote": null, "likes": 110, "num_posts": 100, "closed": false, "per_page": 0, "id": 4235642, "killed": false, "moderate_all": false}, "forum": {"use_media": true, "avatar_size": 32, "apiKey": "90tJoZP8FOtTSLd9wfvBP4TX4rvI7AAT9QjnO3PzgD6A6xN8UZYGtXKNguc4SErv", "features": {}, "use_old_templates": false, "comment_max_words": 0, "mobile_theme_disabled": false, "linkbacks_enabled": false, "is_early_adopter": false, "allow_anon_votes": true, "revert_new_login_flow": false, "stylesUrl": "http://mediacdn.disqus.com/uploads/styles/1/8053/mckoss.css", "login_buttons_enabled": false, "streaming_realtime": false, "show_avatar": true, "reactions_enabled": false, "reply_position": false, "id": 18053, "name": "mckoss.com", "language": "en", "mentions_enabled": true, "url": "mckoss", "allow_anon_post": true, "disqus_auth_disabled": false, "thread_votes_disabled": false, "default_avatar_url": "http://mediacdn.disqus.com/1321567697/images/noavatar32.png", "ranks_enabled": false, "template": {"mobile": {"url": "http://mediacdn.disqus.com/1321567697/build/themes/newmobile.js", "css": "http://mediacdn.disqus.com/1321567697/build/themes/newmobile.css"}, "url": "http://mediacdn.disqus.com/1321567697/build/themes/t_c4ca4238a0b923820dcc509a6f75849b.js?1", "api": "1.0", "name": "Narcissus", "css": "http://mediacdn.disqus.com/1321567697/build/themes/t_c4ca4238a0b923820dcc509a6f75849b.css?1"}, "hasCustomStyles": false, "max_depth": 0, "lastUpdate": "", "moderate_all": false}, "settings": {"realtimeHost": "qq.disqus.com", "uploads_url": "http://media.disqus.com/uploads", "ssl_media_url": "https://securecdn.disqus.com/1321567697", "realtime_url": "http://rt.disqus.com/forums/realtime-cached.js", "facebook_app_id": "52254943976", "minify_js": true, "recaptcha_public_key": "6LdKMrwSAAAAAPPLVhQE9LPRW4LUSZb810_iaa8u", "read_only": false, "facebook_api_key": "4aaa6c7038653ad2e4dbeba175a679ba", "realtimePort": "80", "debug": false, "disqus_url": "http://disqus.com", "media_url": "http://mediacdn.disqus.com/1321567697"}, "ranks": {}, "request": {"sort": 4, "is_authenticated": false, "user_type": "anon", "subscribe_on_post": 0, "missing_perm": null, "user_id": null, "remote_domain_name": "", "remote_domain": "", "is_verified": false, "profile_url": "", "username": "", "is_global_moderator": false, "sharing": {}, "timestamp": "2011-11-21_15:14:43", "is_moderator": false, "ordered_unapproved_posts": [], "unapproved_posts": {}, "forum": "mckoss", "is_initial_load": true, "display_username": "", "points": null, "has_email": false, "moderator_can_edit": false, "is_remote": false, "userkey": "", "page": 1}, "context": {"use_twitter_signin": false, "use_fb_connect": false, "show_reply": true, "active_switches": ["bespin", "community_icon", "embedapi", "google_auth", "mentions", "new_facebook_auth", "new_thread_create", "realtime_cached", "show_captcha_on_links", "ssl", "static_reply_frame", "static_styles", "statsd_created", "upload_media", "use_rs_paginator_60m"], "sigma_chance": 10, "use_google_signin": false, "switches": {"olark_admin_addons": true, "listactivity_replies": true, "es_index_threads": true, "use_master_for_api": true, "google_auth": true, "html_email": true, "statsd.timings": true, "community_icon": true, "show_captcha_on_links": true, "send_to_akismet": true, "olark_admin_packages": true, "static_styles": true, "stats": true, "realtime": true, "realtime_cached": true, "statsd_created": true, "bespin": true, "olark_support": true, "olark_addons": true, "new_facebook_auth": true, "limit_get_posts_days_30d": true, "use_impermium": true, "use_akismet": true, "new_thread_create": true, "edits_to_spam": true, "upload_media": true, "vip_read_slave": true, "embedapi": true, "train_akismet": true, "ssl": true, "send_to_impermium": true, "train_impermium": true, "listactivity_replies_30d": true, "moderate_ascending": true, "new_moderate": true, "use_rs_paginator_60m": true, "redis_threadcount": true, "mentions": true, "olark_install": true, "static_reply_frame": true}, "forum_facebook_key": "975ce081595ffdf388822a459f602062", "use_yahoo": false, "subscribed": false, "active_gargoyle_switches": ["edits_to_spam", "es_index_threads", "html_email", "limit_get_posts_days_30d", "listactivity_replies", "listactivity_replies_30d", "moderate_ascending", "new_moderate", "olark_addons", "olark_admin_addons", "olark_admin_packages", "olark_install", "olark_support", "realtime", "redis_threadcount", "send_to_akismet", "send_to_impermium", "show_captcha_on_links", "stats", "statsd.timings", "train_akismet", "train_impermium", "use_akismet", "use_impermium", "use_master_for_api", "vip_read_slave"], "realtime_speed": 15000, "use_openid": false}}; /* */
    /* */ cookieMessages = {"user_created": null, "post_has_profile": null, "post_twitter": null, "post_not_approved": null}; session = {"url": null, "name": null, "email": null}; /* */

    DISQUS.jsonData = jsonData;
    DISQUS.jsonData.cookie_messages = cookieMessages;
    DISQUS.jsonData.session = session;

    if (DISQUS.useSSL) {
        DISQUS.useSSL(DISQUS.jsonData.settings);
    }

    // The mappings below are for backwards compatibility--before we port all the code that
    // accesses jsonData.settings to DISQUS.settings

    var mappings = {
        debug:                'disqus.debug',
        minify_js:            'disqus.minified',
        read_only:            'disqus.readonly',
        recaptcha_public_key: 'disqus.recaptcha.key',
        facebook_app_id:      'disqus.facebook.appId',
        facebook_api_key:     'disqus.facebook.apiKey'
    };

    var urlMappings = {
        disqus_url:    'disqus.urls.main',
        media_url:     'disqus.urls.media',
        ssl_media_url: 'disqus.urls.sslMedia',
        realtime_url:  'disqus.urls.realtime',
        uploads_url:   'disqus.urls.uploads'
    };

    if (DISQUS.jsonData.context.switches.realtime_setting_change) {
        urlMappings.realtimeHost = 'realtime.host';
        urlMappings.realtimePort = 'realtime.port';
    }
    for (key in mappings) {
        if (mappings.hasOwnProperty(key)) {
            DISQUS.settings.set(mappings[key], DISQUS.jsonData.settings[key]);
        }
    }

    for (key in urlMappings) {
        if (urlMappings.hasOwnProperty(key)) {
            DISQUS.jsonData.settings[key] = DISQUS.settings.get(urlMappings[key]);
        }
    }
}());

DISQUS.jsonData.context.csrf_token = '21bc467119200cb06806902fa8e2f5b0';

DISQUS.jsonData.urls = {
    login: 'http://disqus.com/profile/login/',
    logout: 'http://disqus.com/logout/',
    upload_remove: 'http://mckoss.disqus.com/thread/object_oriented_programming_in_javascript/async_media_remove/',
    request_user_profile: 'http://disqus.com/AnonymousUser/',
    request_user_avatar: 'http://mediacdn.disqus.com/1321567697/images/noavatar92.png',
    verify_email: 'http://disqus.com/verify/',
    remote_settings: 'http://mckoss.disqus.com/_auth/embed/remote_settings/',
    edit_profile_window: 'http://disqus.com/embed/profile/edit/',
    embed_thread: 'http://mckoss.disqus.com/thread.js',
    embed_vote: 'http://mckoss.disqus.com/vote.js',
    embed_thread_vote: 'http://mckoss.disqus.com/thread_vote.js',
    embed_thread_share: 'http://mckoss.disqus.com/thread_share.js',
    embed_queueurl: 'http://mckoss.disqus.com/queueurl.js',
    embed_hidereaction: 'http://mckoss.disqus.com/hidereaction.js',
    embed_more_reactions: 'http://mckoss.disqus.com/more_reactions.js',
    embed_subscribe: 'http://mckoss.disqus.com/subscribe.js',
    embed_highlight: 'http://mckoss.disqus.com/highlight.js',
    embed_block: 'http://mckoss.disqus.com/block.js',
    update_moderate_all: 'http://mckoss.disqus.com/update_moderate_all.js',
    update_days_alive: 'http://mckoss.disqus.com/update_days_alive.js',
    show_user_votes: 'http://mckoss.disqus.com/show_user_votes.js',
    forum_view: 'http://mckoss.disqus.com/object_oriented_programming_in_javascript',
    cnn_saml_try: 'http://disqus.com/saml/cnn/try/',
    realtime: DISQUS.jsonData.settings.realtime_url,
    thread_view: 'http://mckoss.disqus.com/thread/object_oriented_programming_in_javascript/',
    twitter_connect: DISQUS.jsonData.settings.disqus_url + '/_ax/twitter/begin/',
    yahoo_connect: DISQUS.jsonData.settings.disqus_url + '/_ax/yahoo/begin/',
    openid_connect: DISQUS.jsonData.settings.disqus_url + '/_ax/openid/begin/',
    googleConnect: DISQUS.jsonData.settings.disqus_url + '/_ax/google/begin/',
    community: 'http://mckoss.disqus.com/community.html',
    admin: 'http://mckoss.disqus.com/admin/moderate/',
    moderate: 'http://mckoss.disqus.com/admin/moderate/',
    moderate_threads: 'http://mckoss.disqus.com/admin/moderate-threads/',
    settings: 'http://mckoss.disqus.com/admin/settings/',
    unmerged_profiles: 'http://disqus.com/embed/profile/unmerged_profiles/',

    channels: {
        def:      'http://disqus.com/default.html', /* default channel */
        auth:     'https://disqus.com/embed/login.html',
        tweetbox: 'http://disqus.com/forums/integrations/twitter/tweetbox.html?f=mckoss',
        edit:     'http://mckoss.disqus.com/embed/editcomment.html'
    }
};


// 
//     
DISQUS.jsonData.urls.channels.reply = 'http://mediacdn.disqus.com/1321567697/build/system/reply.html';
DISQUS.jsonData.urls.channels.upload = 'http://mediacdn.disqus.com/1321567697/build/system/upload.html';
DISQUS.jsonData.urls.channels.sso = 'http://mediacdn.disqus.com/1321567697/build/system/sso.html';
DISQUS.jsonData.urls.channels.facebook = 'http://mediacdn.disqus.com/1321567697/build/system/facebook.html';
//     
// 