<!DOCTYPE html>
<!-- saved from url=(0051)http://snook.ca/archives/javascript/javascript_pass -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>JavaScript: Passing by Value or by Reference - Snook.ca</title>
	<link rel="stylesheet" href="http://snook.ca/css/snook-v10.css">
	<link rel="stylesheet" href="http://snook.ca/css/snook-v10-print.css" media="print">	
	<script src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/jquery.min.js"></script>
	<meta name="description" content="Snook.ca - Web Design, Development and Consulting Services">
	<meta name="ICBM" content="45.1800, -75.5500">
		<link rev="canonical" type="text/html" href="http://snook.ca/s/503">
		<link rel="alternate" type="application/rss+xml" title="XML" href="http://snook.ca/jonathan/index.rdf"> 
	</head>
<body>
	<div id="header">
		<h1>Snook.ca</h1>
		<h2><a href="http://snook.ca/"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/logo-bookmark.png" alt="Snook Bookmark"> TIPS, TRICKS &amp; BOOKMARKS<br>on WEB DEVELOPMENT</a></h2>
		<div class="nav"><a href="http://snook.ca/about/">About</a> · <a href="http://snook.ca/work/">Work</a> · <a href="http://snook.ca/contact/">Contact</a></div>
	</div>
	<div id="content">
	<div id="main">
		<div class="article inside">
	
	<h1>JavaScript: Passing by Value or by Reference</h1>
	<p>In JavaScript, we have functions and we
have arguments that we pass into those functions. But how JavaScript handles
what you’re passing in is not always clear. When you start getting into
object-oriented development, you may find yourself perplexed over why you have
access to values sometimes but not other times.</p>

<p>When passing in a primitive type variable
like a string or a number, the value is passed in by value. This means that any
changes to that variable while in the function are completely separate from
anything that happens outside the function. Let’s take a look at the following
example:</p>



<pre><code>function myfunction(x)
{
      // x is equal to 4
      x = 5;
      // x is now equal to 5
}

var x = 4;
alert(x); // x is equal to 4
myfunction(x); 
alert(x); // x is still equal to 4
</code></pre>

<p>Passing in an object, however, passes it in
by reference. In this case, any property of that object is accessible within
the function. Let’s take a look at another example:</p>



<pre><code>function myobject()
{
	this.value = 5;
}
var o = new myobject();
alert(o.value); // o.value = 5
function objectchanger(fnc)
{
	fnc.value = 6;
}
objectchanger(o);
alert(o.value); // o.value is now equal to 6
</code></pre>



<p>So, what happens when you pass in a method
of an object? Most would expect (or at least I did) that it would be passed by
reference allowing the method to access other parts of the object it is apart
of. Unfortunately, that’s not the case. Check out this example:</p>



<pre><code>function myobject()
{
	this.value = 5;
}
myobject.prototype.add = function()
{
	this.value++;
}
var o = new myobject();
alert(o.value); // o.value = 5
o.add();
alert(o.value); // o.value = 6
function objectchanger(fnc)
{
	fnc(); // runs the function being passed in
}
objectchanger(o.add);
alert(o.value); // sorry, still just 6
</code></pre>



<p>The problem here is the use of the �<code>this</code>’ keyword. It’s a
handy short-hand for referring to the current object context. When passing a
function as a parameter, though, the context is lost. More accurately, <code>this</code> now refers to the
context of the object making the call instead of the object’s function we just
passed in.  For standalone functions, this would be the <code>window</code> object and for
functions called from an event, this would be the <code>event</code> object.</p>

<h2>Solving the problem</h2>

<p>There are two possible ways to get around
this.</p>



<h3>Option 1: When you know the method</h3>

<p>If you know the method of the object that
will be called then it’s fairly easy. Just pass in the object instead of the
function and call that instead. Using the <code>objectchanger</code> from the last example
you’d get the following:</p>



<pre><code>function objectchanger(obj)
{
	obj.add(); // runs the method of the object being passed in
}
objectchanger(o);
alert(o.value); // the value is now 7
</code></pre>



<h3>Option 2: When you don’t know the method</h3>

<p>If you don’t know the method of the object being passed in
then you need to pass both the method and the object as parameters and use the <code>call</code> method. <code>call</code> is part of the JavaScript
specification and allows a function to run in the context of another object. As
a result, the <code>this</code> keyword
will reference the right object: the object we passed in.</p>

<p>Here’s our <code>objectchanger</code>
function one more time:</p>

<pre><code>function objectchanger(fnc, obj)
{
	fnc.call(obj); // runs the method of the object being passed in
}
objectchanger(o.add, o);
alert(o.value); // the value is now 7
</code></pre>

<p>Happy Scripting!</p>
	
</div>
<div class="meta">
	<div class="dt">Published January 18, 2006 · Updated September 14, 2006</div>
	<div class="cat">Categorized as <a href="http://snook.ca/archives/javascript/">JavaScript</a></div>
	<div class="shorturl">Short URL: <span class="url">http://snook.ca/s/503</span></div>
</div>

<div id="comments">
	<div class="meta">
		<h2>Conversation</h2>
		<div class="commentcount">52 Comments · <a href="http://snook.ca/archives/javascript/javascript_pass.rss">RSS feed</a></div>
		<div class="commentfeed"></div>
	</div>
	
		<div class="comment" id="c3548">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3548">1</a></div>
			<span class="authorname">Sam Minnee</span> said on January 19, 2006		</div>
		<div class="quote"><p>The bind method from prototype is helpful here.  Let me rephrase that - I nearly fell off my chair when I realised how many problems that I had faced in my JS coding career could have been solved much more elegantly with it.</p>
<p>Bind effectively packages what you've done in option 2 into a reusable format.</p>
<p>objectchanger(o.add.bind(o));<br>
alert(o.value); // this'll be 7 now</p>
<p>Some terse, inexplicable examples</p>
<p>obj = document.getElementById('wow');<br>
myFunc = function() {<br>
  this.somethingCool();<br>
}<br>
setTimeout(myFunc.bind(obj), 500);</p>
<p>function myAjaxThing(request, onSuccess) { ... }<br>
MyClass = function() {<br>
 ...<br>
}<br>
MyClass.prototype = {<br>
  sendRequest : function() {<br>
     myAjaxThing(someURL, this.afterRequest.bind(this))<br>
  },<br>
  afterRequest : function(response) {<br>
    this.something = response.responseText;<br>
  }
</p>
</div>
	</div>
		<div class="comment" id="c3551">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3551">2</a></div>
			<span class="authorname">Colin D. Devroe</span> said on January 19, 2006		</div>
		<div class="quote"><p>Great job at explaining this.  I've run into this a few times, but never had the desire to write it up.</p>
<p>Thanks for sharing it.
</p>
</div>
	</div>
		<div class="comment" id="c3552">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3552">3</a></div>
			<span class="authorname">Veracon</span> said on January 19, 2006		</div>
		<div class="quote"><p>I'm not too much into the JavaScript thing, but that call() method looks to work sort of like Python's getattr() -- is that what it does? Call a method from an object and the NAME of a method rather than the object of a method?
</p>
</div>
	</div>
		<div class="comment" id="c3564">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3564">4</a></div>
			<span class="authorname">Oswald</span> said on January 20, 2006		</div>
		<div class="quote"><p>@Veracon</p>
<p>It's method of each function. Simple takes the first given parametr, and use it as "this" keyword. Example:</p>
<p>function greeting() {<br>
 alert(this.message);<br>
}</p>
<p>// global variable == property of the window object<br>
var message = 'Hello universe!';</p>
<p>// "this" is window: 'Hello universe!'<br>
greeting();</p>
<p>// object with own property "message"<br>
var o = {message: 'Hello world!'};</p>
<p>// "this" is o: 'Hello world!'<br>
greeting.call(o);   </p>
</div>
	</div>
		<div class="comment" id="c3573">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3573">5</a></div>
			<span class="authorname">Mislav</span> said on January 20, 2006		</div>
		<div class="quote"><blockquote><p>"When passing in a primitive type variable like a string or a number, the value is passed in by value. (...) Passing in an object, however, passes it in by reference."</p></blockquote>
<p>It's wrong to say it that way. In JavaScript, <strong>everything</strong> is an object, even strings and numeric types.
</p>
</div>
	</div>
		<div class="comment snook" id="c3574">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3574">6</a></div>
			<span class="authorname">Jonathan Snook</span> said on January 20, 2006		</div>
		<div class="quote"><p>Mislav: the <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">ECMAScript specification</a> [PDF] actually makes somewhat of a separation between primitive types and objects:</p>
<blockquote><p>A primitive value is a member of one of the following built-in types: Undefined, Null, Boolean, Number, and String; an object is a member of the remaining built-in type Object; and a method is a function associated with an object via a property.</p>
</blockquote>
</div>
	</div>
		<div class="comment" id="c3606">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c3606">7</a></div>
			<span class="authorname">Mislav</span> said on January 23, 2006		</div>
		<div class="quote"><p>I am well aware of that. However, since even primitive types are objects I felt the "primitive type vs. objects" classification is wrong. Now I realize that the word 'object' is mostly used to indicate the member of Object (and derived classes) and to distinguish it from mentioned primitive types.</p>
<p>This (by value vs. by reference) behaviour is seen in PHP5 too, where objects are passed by reference by default - in contrast with other types.
</p>
</div>
	</div>
		<div class="comment" id="c4059">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c4059">8</a></div>
			<span class="authorname">lecochien</span> said on February 21, 2006		</div>
		<div class="quote"><p>is call() closed to eval() ?<br>
eg. :</p>
<p>function objectchanger(fnc, obj)<br>
{<br>
	//fnc.call(obj);<br>
eval(fnc +'('+ obj +')');// Beurk !<br>
}<br>
objectchanger(o.add, o);</p>
<p>SOrry it's very dirty..
</p>
</div>
	</div>
		<div class="comment" id="c4069">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c4069">9</a></div>
			<span class="authorname">Rodd Snook</span> said on February 22, 2006		</div>
		<div class="quote"><p>No lecochien, I don't think call() is like eval().</p>
<p>However, I believe Veracon can achieve something similar to the getettr() function like so:</p>
<p>function objectchanger(fname, obj) {<br>
obj[fname]();<br>
}</p>
<p>objectchanger('add', o);</p>
<p>This is a bit like the PHP paradigm of passing an array with an object and a method name in it to a built-in function.</p>
<p>(P.S. I am not related to Jonathan)
</p>
</div>
	</div>
		<div class="comment" id="c4379">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c4379">10</a></div>
			<span class="authorname">TDD</span> said on March 10, 2006		</div>
		<div class="quote"><p>The bind-related comment sure is useful. I love it.</p>
<p>However, provided that we can define the add method in the same code that defines the constructor, why not use closures instead, making usage even simpler:</p>
<p>function MyObj() {<br>
  this.value = 5;<br>
  o = this;<br>
  this.add = function() {<br>
    ++o.value;<br>
  }<br>
}</p>
<p>function myFunc(f) {<br>
  f();<br>
}</p>
<p>var x = new MyObj();<br>
alert(x.value);<br>
x.add();<br>
alert(x.value);<br>
myFunc(x.add);<br>
alert(x.value);</p>
<p>You'll get 5,6,7 (at least that's what I get on FF1.5).</p>
<p>The key here is to have add() *not* use "this", which is context-bound, but another name, which is closure-bound, such as "o", which here is a reference to the object bound to "this" in the constructor.</p>
<p>Of course, you can't use that with functions added elsewhere through the prototype mechanism, since they don't have the original object context.
</p>
</div>
	</div>
		<div class="comment" id="c4380">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c4380">11</a></div>
			<span class="authorname">TDD</span> said on March 10, 2006		</div>
		<div class="quote"><p>BTW, this bind thing is non-standard. It's not in the JS spec, nor even in the MSDN's JScript ref (worth a shot), and doesn't work on FF 1.5 for instance. Only call and apply (which are roughly synonymous) seem to be standard, but they don't yield a context-adapted method pointer, they RUN the method, which makes them less useful.
</p>
</div>
	</div>
		<div class="comment snook" id="c4382">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c4382">12</a></div>
			<span class="authorname">Jonathan Snook</span> said on March 10, 2006		</div>
		<div class="quote"><p>TDD: bind() is a feature of <a href="http://prototype.conio.net/">Prototype</a> and is essentially a synonym for call(). (which was the trigger for this article... I left out closures and Prototype as I really wanted the article to just explain the topic at hand)
</p>
</div>
	</div>
		<div class="comment" id="c4985">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c4985">13</a></div>
			<span class="authorname">Daniel LaLiberte</span> said on March 31, 2006		</div>
		<div class="quote"><blockquote><p>"When passing a function as a parameter, though, the context is lost. More accurately, this now refers to the context of the object making the call instead of the object�s function we just passed in. "</p></blockquote>
<p>       There is a better (i.e. correct) way to look at this.  No context is lost when you pass a function as a parameter.  When you call a method, you are <em>always</em> providing the context at that time, and if you call it as a function rather than a method of some object, it uses the default context, as you point out.  (Hmm, what happens if you call it within some other method invocation, not the global context?)</p>
<p>Getting a method via an instance, e.g. o.add, never does the binding to the object you might assume, whether or not the method (as a function) is passed anywhere else.   It might be nice if it did that binding, but it can also be handy to apply a method to a different object.</p>
</div>
	</div>
		<div class="comment" id="c8915">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c8915">14</a></div>
			<span class="authorname">Dafin</span> said on June 06, 2006		</div>
		<div class="quote"><p>Thanks, informative article
</p>
</div>
	</div>
		<div class="comment" id="c10401">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c10401">15</a></div>
			<span class="authorname">Owen</span> said on June 27, 2006		</div>
		<div class="quote"><p>In your second option, what if the add function took a parameter? how would that change the syntax of the call function?
</p>
</div>
	</div>
		<div class="comment" id="c10465">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c10465">16</a></div>
			<span class="authorname">Johannes Knaupp</span> said on June 27, 2006		</div>
		<div class="quote"><p>The header of this topic does not seem to me to reflect the problem.</p>
<blockquote><p>So, what happens when you pass in a method of an object? Most would expect (or at least I did) that it would be passed by reference allowing the method to access other parts of the object it is apart of. Unfortunately, that’s not the case.</p></blockquote>
<p>I think you mixed up these two different things: the function/method, and its object.</p>
<p>The function is a non-primitive object, and therefore it is, of course, passed by reference. But the object refered to by the 'this' keyword is a different thing, and has nothing to do with the type of parameter passing.</p>
<p>Consider this modified sample:</p>
<pre>function Myobject() {
	this.value = 5;
}
Myobject.prototype.add = function() {
	this.value++;
};

var o = new Myobject();
alert(o.value); // 5
o.add();
alert(o.value); // 6
// that's what we expect:
alert(o.add.h ? 'h() exists.'
              : 'No h(), sorry!');

function objectchanger(fnc) {
	fnc(); // runs the function being passed in
	// adds a static method:
	fnc.h = function() {
		alert('Hello!');
	};
}
objectchanger(o.add);
alert(o.value); // still just 6
alert(o.add.h ? 'h() exists.'
              : 'No h(), sorry!');	// :-)

// now let's call the new method:
o.add.h();	// :-)))
</pre>
<p>This clearly is no "standard" way of programming. It is only meant to demonstrate that the function was passed by reference: the change still exists after having returned form objectchanger().</p>
</div>
	</div>
		<div class="comment snook" id="c10468">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c10468">17</a></div>
			<span class="authorname">Jonathan Snook</span> said on June 27, 2006		</div>
		<div class="quote"><p>Johannes: thanks for helping to clear that up. Yes, the title really applies to the first half of the article where the discussion is by value or by reference whereas the second half really talks of the use of the 'this' keyword and possible ways to solve this.
</p>
</div>
	</div>
		<div class="comment" id="c18732">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c18732">18</a></div>
			<span class="authorname">Paul</span> said on August 22, 2006		</div>
		<div class="quote"><p>Thanks, explained very well.
</p>
</div>
	</div>
		<div class="comment" id="c19479">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c19479">19</a></div>
			<span class="authorname">Suryakant Gupta</span> said on August 25, 2006		</div>
		<div class="quote"><p>Very very thanx ,</p>
<p>u described it very well.
</p>
</div>
	</div>
		<div class="comment" id="c19512">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c19512">20</a></div>
			<span class="authorname">midnite</span> said on August 25, 2006		</div>
		<div class="quote"><p>i think the different is the way of JS accessing the variable passed in. Try this:</p>
<p>function incArray(a){<br>
a[0]++;<br>
}<br>
var testArray = new Array(1);<br>
testArray[0] = 4;<br>
document.writeln('testArray[0]: '+testArray[0]+'<br>'); // 4<br>
incArray(testArray);<br>
document.writeln('testArray[0]: '+testArray[0]+'<br>'); // 5</p>
<p>accessing array is by its address, while variable is by hash table. Try this:</p>
<p>function incVar(v){<br>
v++;<br>
}<br>
var testVar = 4;<br>
document.writeln('testVar: '+testVar+'<br>'); // 4<br>
incVar(testVar);<br>
document.writeln('testVar: '+testVar+'<br>'); // 4</p>
<p>this logic holds in every language.<br>
adding * or &amp; to a variable result in an error. so JS can't change the method of accessing its variables, i suppose.</p>
<p>any wiser solution ?
</p>
</div>
	</div>
		<div class="comment snook" id="c19554">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c19554">21</a></div>
			<span class="authorname">Jonathan Snook</span> said on August 25, 2006		</div>
		<div class="quote"><p>midnite: it works as you might expect for arrays because the array is an object and gets passed by reference. For your second example, you'd have to have incVar return the modifed value back.</p>
<pre><code>function incVar(v){
return ++v; //pre-increment
}
var testVar = 4;
// need to assign the result back
testVar = incVar(testVar);
</code></pre>
</div>
	</div>
		<div class="comment" id="c19574">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c19574">22</a></div>
			<span class="authorname">midnite</span> said on August 25, 2006		</div>
		<div class="quote"><p>won't it be too clumsy if many variables are required to be modified within the function?<br>
why JS don't develope something like * or &amp; like all others do ?<br>
i thought it has. Or i'd better say i choose to believe that it has. But just not * or &amp; like others, just i don't know what they are and how to use it.
</p>
</div>
	</div>
		<div class="comment" id="c46568">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c46568">23</a></div>
			<span class="authorname"><a href="http://www.zed23.com/">Ryan Brooks</a></span> said on January 23, 2007		</div>
		<div class="quote"><p>Super useful as a reference! Thanks!
</p>
</div>
	</div>
		<div class="comment" id="c47646">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c47646">24</a></div>
			<span class="authorname">Gary Stephenson</span> said on April 03, 2007		</div>
		<div class="quote"><p>The statement:</p>
<blockquote><p>"Passing in an object, however, passes it in by reference."</p></blockquote>
<p> is simply wrong.  It simply passes in <b>a</b> reference - by value. The reference itself <b>cannot</b> be altered - only the contents of the thing it refers to. There is a <b>big</b> difference between "passing-by-reference" and "passing-a-reference-by-value".</p>
<p>Javascript does <b>not</b> support the passing of parameters by reference.  I find it  amazing the number of Javascript writers that get this wrong.</p>
<p>If Javascript supported pass-by-reference, and supposing we could pass a parameter by reference by preceding it with an "@" modifier (a la Clipper), then we would have</p>
<pre><code>function objectchanger(fnc)
{
    fnc = null;
}

f = new function() { ... }
objectchanger( @f );
alert( f ? "True", "False"); // -&gt; "False"
</code></pre>
<p>pedantically yours, gary</p>
</div>
	</div>
		<div class="comment" id="c47908">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c47908">25</a></div>
			<span class="authorname">Osamu</span> said on April 18, 2007		</div>
		<div class="quote"><p>Dir Sir.</p>
<p>I am a translator. I am translating a programming document and encounterd the term ""pass in".</p>
<p>You use "pass in" many times. What means "pass in"</p>
<p>Thnak you.
</p>
</div>
	</div>
		<div class="comment" id="c48611">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c48611">26</a></div>
			<span class="authorname">Gabe</span> said on May 25, 2007		</div>
		<div class="quote"><p>I believe the problem is a scope issue. If you pass a method to a function, the method will be called in the scope of that function. Because the parent object does not exist in the private scope of the function, its properties cannot be accessed from within the function. If you pass an object, its properties are available through the scope of that object. </p>
<p>If you place an alert(this); inside your method "add":</p>
<pre>Myobject.prototype.add = function() {
        alert('called in scope of: '+this);
	this.value++;
};
</pre>
<p>You'll notice that you've isolated your method to where it becomes a global object (method of window). </p>
<p>Using the method "call" allows you to call a method in the scope of the calling object, not the scope you are calling from. </p>
<p>As shown by Johannes Knaupp, methods are passed by reference since they are objects themselves, its just that its in a scope where its parent Object does not exist.
</p>
</div>
	</div>
		<div class="comment" id="c50554">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50554">27</a></div>
			<span class="authorname">Scott</span> said on July 03, 2007		</div>
		<div class="quote"><pre><code>

var a = 0;

function pauseMedia () {
	if (a = 1) {
		a = 0;
		playSong();
	} else {
		a = 1;
		pauseSong();
}

function playSong() {
	mediaPlayer.Play();
}

function pauseSong(){
	mediaPlayer.Pause();
}
</code></pre>
<p>Dear Sir,</p>
<p>As you can see the source code above, the playSong() will play the song when i press play button on remote control. pauseSong() will pause the song when i press pause button on remote control. Since i want to create a new button &amp; want this new button to have click 1st time to pause the song, then click 2nd time to play the song again, then click again to pause the song &amp; so on...</p>
<p>So i write the playPauseButton() function. But i only can pause the song &amp; cannot play the song with clicking the same button. Why?
</p>
</div>
	</div>
		<div class="comment snook" id="c50556">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50556">28</a></div>
			<span class="authorname">Jonathan Snook</span> said on July 03, 2007		</div>
		<div class="quote"><p>@Scott: the problem you're running into isn't a scoping issue but rather that your variable never changes in value. Change your pauseMedia function to:</p>
<pre><code>function pauseMedia () {
   if (a == 1) {
      playSong();
   } else {
      pauseSong();
   }
   a = 1 - a;
}</code></pre>
<p>The last line constantly flips between 0 and 1 every time the function runs.
</p>
</div>
	</div>
		<div class="comment" id="c50557">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50557">29</a></div>
			<span class="authorname">Scott</span> said on July 03, 2007		</div>
		<div class="quote"><p>Dear Sir,</p>
<p>Using back the example coding i given, may i know about will the a become 1 after pauseSong() (in the else section)?
</p>
</div>
	</div>
		<div class="comment snook" id="c50558">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50558">30</a></div>
			<span class="authorname">Jonathan Snook</span> said on July 03, 2007		</div>
		<div class="quote"><p>Ah, I see what you were trying to do. In which case, the assignment in the if statement was likely messing things up. It needs to be two == and not just one =.
</p>
</div>
	</div>
		<div class="comment" id="c50559">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50559">31</a></div>
			<span class="authorname">Scott</span> said on July 03, 2007		</div>
		<div class="quote"><p>var a = 0;</p>
<p>function pauseMedia () {<br>
	if (a == 1) {<br>
		a = 0;<br>
		playSong();<br>
	} else {<br>
		a = 1;<br>
		pauseSong();<br>
}</p>
<p>function playSong() {<br>
	mediaPlayer.Play();<br>
}</p>
<p>function pauseSong(){<br>
	mediaPlayer.Pause();<br>
}</p>
<p>Dear Sir,</p>
<p>Very sorry about my typing error. The code should look like this. What i need to know is the variable a's number. Is it the variable will pass the number i need?</p>
<p>For example, if a==0, set the a=1 and do pauseSong(). Is it the a will become 1? Is it it will replace 0 with 1? Will it pass the 1 to pauseMedia() and make the a==1 work?
</p>
</div>
	</div>
		<div class="comment snook" id="c50567">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50567">32</a></div>
			<span class="authorname">Jonathan Snook</span> said on July 03, 2007		</div>
		<div class="quote"><p>Scott, you've also got a missing close bracket } after pauseSong();. Assuming that bracket is in the right place, I don't see anything wrong with the code.
</p>
</div>
	</div>
		<div class="comment" id="c50600">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c50600">33</a></div>
			<span class="authorname">Scott</span> said on July 04, 2007		</div>
		<div class="quote"><p>Thank you Sir, you helped me a lot on solving my problem.
</p>
</div>
	</div>
		<div class="comment" id="c55209">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c55209">34</a></div>
			<span class="authorname">Sharath</span> said on September 11, 2007		</div>
		<div class="quote"><p>Thanks for the article. It helped me solve my problem with select list box options, where I was adding items to the list by assigning values of a particular object. When I changed the value of the object, even the option element got changed because it was reference. Now I created new option element by using string argument to it, and the problem is solved.
</p>
</div>
	</div>
		<div class="comment" id="c59629">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c59629">35</a></div>
			<span class="authorname">Abillei Basnayake</span> said on September 26, 2008		</div>
		<div class="quote"><p>What a nice website design you have here. I just found out your website when I'm searching for javascript passing value. I'm interested in the website layout design. Perhaps you can give tutorial on this subject.
</p>
</div>
	</div>
		<div class="comment" id="c59958">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c59958">36</a></div>
			<span class="authorname">David Spector</span> said on October 29, 2008		</div>
		<div class="quote"><p>I wrote a simple Ajax implementation, but then wanted to add multiple request objects (one for simple requests, another for concurrent data refreshing). Here's my solution, using a one-element array for passing the request object by-reference:</p>
<p><code><br>
In caller:</code></p><code>
<p>var Req=[]; // General request object (short lifespan)<br>
var ReqRcv=[]; // Receive data request object (long lifespan or polling)</p>
<p>function Loaded()<br>
	{<br>
	// Alloc both request objects<br>
	AjaxInit(Req);<br>
	AjaxInit(ReqRcv);<br>
	}</p>
<p>	// Send Ajax request<br>
	Post(ReqRcv,'Receive',NrChars);</p>
<p>// In Ajax file:</p>
</code><p><code>function AjaxInit(Req) // Req is a 1-element array<br>
	{<br>
	if (window.XMLHttpRequest)<br>
		// Standard<br>
		Req[0]=new XMLHttpRequest();<br>
		// Req[0] is the actual request object being set here<br>
	...<br>
	}<br>
</code></p>
</div>
	</div>
		<div class="comment" id="c60290">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60290">37</a></div>
			<span class="authorname">MajorYe</span> said on November 20, 2008		</div>
		<div class="quote"><p>Great,thanks for you sharing ,sir<br>
I would like to see your blog,<br>
from there ,can get much thing<br>
I want to get, thanks.</p>
<p>--Major
</p>
</div>
	</div>
		<div class="comment" id="c60291">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60291">38</a></div>
			<span class="authorname">MajorYe</span> said on November 20, 2008		</div>
		<div class="quote"><p>Great,thanks for you sharing ,sir<br>
I would like to see your blog,<br>
from there ,can get much thing<br>
I want to get, thanks.</p>
<p>--Major
</p>
</div>
	</div>
		<div class="comment" id="c60689">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60689">39</a></div>
			<span class="authorname">Eric Smiling</span> said on December 19, 2008		</div>
		<div class="quote"><p>The two solutions you provide are interesting. How do you feel about calling the method on the object it belongs to inside of a function that, for example, handles an event. For example:</p>
<p>function SomeObject(element, instanceVar){<br>
  this.element = element;<br>
  this.instanceVar = instanceVar;</p>
<p>  //attach an event handler to the element<br>
  var currentObj = this;<br>
  this.element.onclick = function(e){<br>
      currentObj.clickHandler(e);<br>
  }<br>
}<br>
SomeObject.prototype.clickHandler = function(event){<br>
    // This function is an event handler of an element and a method of some object<br>
    // 'this' refers to the current object. We have access to all of it's instance vars and<br>
    // methods as well as the typical stuff we'd want in an event handler like a reference<br>
    // to the target as well as the event object...<br>
    var e = event || window.event;<br>
    doSomethingWith(this.instanceVar);<br>
    doSomethingElseWith(this.element);<br>
}</p>
</div>
	</div>
		<div class="comment snook" id="c60692">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60692">40</a></div>
			<span class="authorname">Jonathan Snook</span> said on December 19, 2008		</div>
		<div class="quote"><p>@Eric Smiling: I don't normally use that approach just for event handling as it makes the code less clear as to what's happening. In project these days, I often use the Prototype bind or bindAsEventListener feature which essentially handles proper binding for event handling.
</p>
</div>
	</div>
		<div class="comment" id="c60883">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60883">41</a></div>
			<span class="authorname">Simplykid</span> said on January 07, 2009		</div>
		<div class="quote"><p>This site is really great. It gives me view about passing primitive type variable that you can just pass it by value. And the great thing is about the scope issue that it really gives me clearly thought about how javascript handles passing by reference issue.</p>
<p>But I got some problem regarding executing function or method(but I'm not working with this one) from a string like eval() or setTimeout()</p>
<p>On what Sam Minnee wrote ~ setTimeout(myFunc.bind(obj), 500);  ~<br>
Will it run after 500ms (i have tried the same case with alert() and it fires immediately)?<br>
Because from what i know setTimeout is accepting string as the first argument.</p>
<p>My problem is somehow same like this one. Here's my example code:</p>
<pre><code>
//This case about make some dropdownmenu appear with animating sliding down
function test(obj) {
	obj.style.height = '0px';
	slideMenuDown(obj, 0, 40);
}

//obj = object to be slided down, 2nd param is current height, 3rd param is final height
function(obj, ch, fh) {
	if ((ch &lt; fh)) {
			ch += 5;
			if (ch&gt;fh) ch = fh;
			obj.style.height = ch + 'px';
			setTimeout('slideDownMenu(' + objID + ',' + ch + ',' + fh + ')', 10);  //this is my problem...
			//if the function accept the id of the object, it works when i get the referenct by getElementById(),
			// but in this case, I don't feels like to use it.
		}
	else return;
}

//Let's assume 'ob' is the menu object from box element like &lt;div&gt; tag
test(ob);
</code></pre>
<p>Some notes here are:<br>
- First, because sometimes when I didn't get the correct reference with getElementById() function,<br>
and maybe because there's 2 element with the same id (don't really care right now why, my prediction the cause is iframe),<br>
I don't feel like to use the id value of the object.</p>
<p>- Second, I don't want to rely on global variable as possible as I can, so please understand me.</p>
<p>Is there any way to solve my problem?<br>
Sorry to write this long, and if I'm out of topic then i'm really sorry too.</p>
<p>Thanks in advanced<br>
~ Simplykid ~</p>
</div>
	</div>
		<div class="comment" id="c60884">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60884">42</a></div>
			<span class="authorname">Simplykid</span> said on January 07, 2009		</div>
		<div class="quote"><p>sorry there some mistype in my code, that objID should be obj:</p>
<p>function(obj, ch, fh) {<br>
if ((ch &lt; fh)) {<br>
ch += 5;<br>
if (ch&gt;fh) ch = fh;<br>
obj.style.height = ch + 'px';<br>
setTimeout('slideDownMenu(' + obj + ',' + ch + ',' + fh + ')', 10); //this is my problem...<br>
//if the function accept the id of the object, it works when i get the reference by getElementById(),<br>
// but in this case, I don't feels like to use it and not global variable too.<br>
}<br>
else return;<br>
}
</p>
</div>
	</div>
		<div class="comment snook" id="c60886">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60886">43</a></div>
			<span class="authorname">Jonathan Snook</span> said on January 08, 2009		</div>
		<div class="quote"><p>@Simplykid, it sounds like what you want to do is take advantage of closures to maintain scope on the variables. Like this:</p>
<pre><code>
function animateThis(id) {
   var el = document.getElementById(id);
   var ch, fh;

   function slide() {
      ch += 5;
      if (ch &gt; fh) ch = fh;
      el.style.height = ch + 'px';
      if (ch &lt; fh) setTimeout(slide, 10);
   }
}
</code></pre>
<p>I'm obviously missing a lot of detail in this example but hopefully it explains the concept of what I'm trying to do here.
</p>
</div>
	</div>
		<div class="comment" id="c60888">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60888">44</a></div>
			<span class="authorname">Simplykid</span> said on January 08, 2009		</div>
		<div class="quote"><p>Wow, I just surprised that you can do this thing that make function in a function (or maybe it's just me that there's already a way like that since long ago). And well, i think it is possible, because by creating a function, it means also creating an object of function type. So, you can also adding some method to the object, in this case is the slide() function</p>
<p>I found dificulty at the beginning, but after some trial and error, i must add a statement that execute the slide() once for it to succeed.<br>
And..<br>
IT WORKS!!! THANKS A LOT! IT SOLVES MY PROBLEM!!</p>
<p>But there are still something i don't get. </p>
<p>First, that settimeout can accept something other than string code to be execute. After i search in the internet, then i know it can pointer of function<br>
But is it still work with what Sam Minnee wrote ~ setTimeout(myFunc.bind(obj), 500); ~ which I don't think that's a pointer to function?</p>
<p>Second, why if i write down this code:<br>
setTimeout('slide();', 10);<br>
instead of<br>
setTimeout(slide, 10);<br>
it can't work?</p>
<p>And how to detect what is the context that call a function?</p>
<p>Thank for the solution.</p>
</div>
	</div>
		<div class="comment snook" id="c60889">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60889">45</a></div>
			<span class="authorname">Jonathan Snook</span> said on January 08, 2009		</div>
		<div class="quote"><p>When you have the code quoted, all it does is get eval'd internally. You almost never want to or need to use eval. So, setTimeout(slide,10) runs the slide function in 10ms and the context ends up being the global (window) object, which is why the use of closures helps you retain access to important variables. </p>
<p>The setTimeout(myFunc.bind(obj), 500) calls the bind function immediately but the bind function <em>returns</em> a function that gets called after 500ms. It's a little more confusing, I know. :) The bind function is part of PrototypeJS (and is often found in many of the other JavaScript libraries).
</p>
</div>
	</div>
		<div class="comment" id="c60890">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c60890">46</a></div>
			<span class="authorname">Simplykid</span> said on January 08, 2009		</div>
		<div class="quote"><p>Well, that's really make sense since setTimeout is a method of window object, and slide function is just available through the animateThis function if you don't have the pointer to the slide function.</p>
<p>That really clears everything on my mind now.<br>
Though i still need to know if there's a way how to detect the context that call a function within the function itself, because if i know this it will be very helpful to do testing in another occasion.</p>
<p>Thanks a lot for all that has given their thought in this site especially this site's owner.<br>
This site is really great, very helpful
</p>
</div>
	</div>
		<div class="comment" id="c61036">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c61036">47</a></div>
			<span class="authorname">Jean</span> said on January 15, 2009		</div>
		<div class="quote"><p>Can somebody explain the results of the following to me in light of this whole issue of passing methods by reference. Why do I get the  results I did based on the main example of this post with some added changes.<br>
I created 3 functions: incMyO1, incMyO2 and incMyO3 whick increments the value of o. The only difference is what gets send to them. The first to give the o.value as 6 but the last one gives o.value as 7, why is this? Note that only one should be run at a time, comment out the other two when testing:</p>
<p>function Myobject() {<br>
	   this.value = 5;<br>
	   this.add = function() {<br>
        ++this.value;<br>
       }<br>
    }<br>
    //Myobject.prototype.add = function() {<br>
    //	this.value++;<br>
    //};</p>
<p>    function incMyO1(t) {<br>
        t();<br>
    }</p>
<p>    function incMyO2(t) {<br>
        t;<br>
    }</p>
<p>    function incMyO3(t) {<br>
        t;<br>
    }</p>
<p>    var o = new Myobject();<br>
    alert(o.value); // result = 5</p>
<p>    o.add();<br>
    alert(o.value); // result = 6</p>
<p>    //incMyO1(o.add);<br>
    //alert(o.value); // result = 6</p>
<p>    //incMyO2(o.add);<br>
    //alert(o.value); // result = 6</p>
<p>    incMyO3(o.add());<br>
    alert(o.value); // result = 7</p>
<p>Thanks!
</p>
</div>
	</div>
		<div class="comment snook" id="c61037">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c61037">48</a></div>
			<span class="authorname">Jonathan Snook</span> said on January 15, 2009		</div>
		<div class="quote"><p>Jean, your incMyO3(o.add()) line increments the value and then passes the return value (of which is undefined, since your value method doesn't have a "return" statement). incMyO1 doesn't increment because you're only passing the value function into the incMyO1 function which loses the o object context (and therefore incrementing its value does nothing). </p>
<p>I hope that paints a clearer picture.
</p>
</div>
	</div>
		<div class="comment" id="c61038">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c61038">49</a></div>
			<span class="authorname">Jean</span> said on January 15, 2009		</div>
		<div class="quote"><p>Thanks snook. Thought it was something obvious. I'm just trying various tests to get my head around this topic. Great topic, very informative. By the way, great looking site!
</p>
</div>
	</div>
		<div class="comment" id="c66505">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c66505">50</a></div>
			<span class="authorname">jairo</span> said on March 09, 2011		</div>
		<div class="quote"><p>Thanks. This solved my problem, and it is also applicable in attributes. My problem was this, I had two objects, with an array attribute routes:</p>
<p>curr.routes<br>
new.routes</p>
<p>when I pass them in a function (which compares 2 arrays and returns an array with the elements that exists on both array; non-destructive), the attributes of the objects are erased.</p>
<p>prev = compareArray(curr.routes, new.routes)<br>
// curr.routes, new.routes is now erased</p>
<p>To solve this, I instantiated 2 variables for each routes array, then passed it to the function:</p>
<p>var currRoutes = []; currRoutes = curr.routes;<br>
var newRoutes = []; newRoutes = new.routes;<br>
prev = compareArray(currRoutes, newRoutes);<br>
// curr.routes &amp; new.routes are retained.</p>
<p>Thanks again!
</p>
</div>
	</div>
		<div class="comment" id="c66980">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c66980">51</a></div>
			<span class="authorname">Sams club Credit card</span> said on March 31, 2011		</div>
		<div class="quote"><p>
I am glad to be  one of several  visitants on this  outstanding website   (:,  thankyou  for posting .
</p>
</div>
	</div>
		<div class="comment" id="c67660">
		<div class="meta">
			<div class="commentnumber"><a href="http://snook.ca/archives/javascript/javascript_pass#c67660">52</a></div>
			<span class="authorname">bgc2033</span> said on April 28, 2011		</div>
		<div class="quote"><p>Indeed. Why pass variables to functions at all when you can return custom objects with all the data you could ever dream of.
</p>
</div>
	</div>
		


		<div id="commentsclosed">Sorry, comments are closed for this post. If you have any further questions or
	comments, feel free to <a href="http://snook.ca/contact/">send them to me directly</a>.</div>
	</div>	</div>
	<div id="sidebar">
		<p><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/hedcut.png" alt="I&#39;m Jonathan Snook."> I'm Jonathan Snook and I write about web design and development. I <a href="http://snook.ca/pages/speaking">speak at conferences</a> and I yammer on about what I'm having for lunch on <a href="http://twitter.com/snookca">Twitter</a>. You can keep up to date with everything I blog here via the <a href="http://snook.ca/jonathan/index.rdf">RSS feed</a>.</p>
		<p>Want to <a href="http://snook.ca/about/">learn more</a>?</p>
		<div id="fusion">
		<script> 
		document.write(unescape('%3Cscr' + 'ipt src="http://adn.fusionads.net/www/pull/get.php?zoneid=98&charset=UTF-8&withtext=1&cb=' + Math.floor(Math.random() * 99999999999) + '"%3E%3C/script%3E'));
		</script><script src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/get.php"></script><span class="fusionentire"> <a href="http://adn.fusionads.net/click?creative_id=29&publisher_id=98&106332072739.23207" target="_self" '=""><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/29-sourcebits1.png" width="130" height="100" alt="Design-Led Engineering for Mobile &amp; Tablets. Sourcebits." title="Design-Led Engineering for Mobile &amp; Tablets. Sourcebits." border="0" class="fusionimg"></a><br><span class="fusiontext"><a href="http://adn.fusionads.net/click?creative_id=29&publisher_id=98&1214455588629.1658" target="_self" '="">Design-Led Engineering for Mobile &amp; Tablets. Sourcebits.</a></span></span> 
		<!--<![endif]-->
		<div class="tagline"><a href="http://fusionads.net/" title="Powered by Fusion Ads">POWERED by FUSION</a></div>
		</div>
		
		<div class="nav">
			<h2 class="collapsed" tabindex="0">DISCOVER IT ALL</h2>
			<div class="items" style="display: none; ">
				<div class="group category">
				<h3>Category</h3>
				<ul>
					<li><a href="http://snook.ca/archives/snooks_book_nook/" class="">Book Reviews</a></li><li><a href="http://snook.ca/archives/conferences/" class="">Conferences</a></li><li><a href="http://snook.ca/archives/html_and_css/" class="">HTML and CSS</a></li><li><a href="http://snook.ca/archives/javascript/" class="active">JavaScript</a></li><li><a href="http://snook.ca/archives/opinion/" class="">Opinion</a></li><li><a href="http://snook.ca/archives/other/" class="">Other</a></li><li><a href="http://snook.ca/archives/personal/" class="">Personal</a></li><li><a href="http://snook.ca/archives/review/" class="">Review</a></li><li><a href="http://snook.ca/archives/accessibility_and_usability/" class="">Usability</a></li>				</ul>
				</div>
				<div class="group year">
				<h3>Year</h3>
				<ol>
					<li><a href="http://snook.ca/archives/2011/" class="">2011</a></li><li><a href="http://snook.ca/archives/2010/" class="">2010</a></li><li><a href="http://snook.ca/archives/2009/" class="">2009</a></li><li><a href="http://snook.ca/archives/2008/" class="">2008</a></li><li><a href="http://snook.ca/archives/2007/" class="">2007</a></li><li><a href="http://snook.ca/archives/2006/" class="">2006</a></li><li><a href="http://snook.ca/archives/2005/" class="">2005</a></li><li><a href="http://snook.ca/archives/2004/" class="">2004</a></li><li><a href="http://snook.ca/archives/2003/" class="">2003</a></li><li><a href="http://snook.ca/archives/2002/" class="">2002</a></li><li><a href="http://snook.ca/archives/2001/" class="">2001</a></li>				</ol>
				</div>
			</div>
		</div>

	</div>
	</div>
	<div id="footer">
		<div id="delicious"><div class="shell">
			<h2>Delicious Links</h2>
			<ul class="delicious">
<li><a href="http://www.w3.org/Style/CSS/current-work"><strong>CSS current work</strong><br>An easy to read list of all the CSS specifications and their statuses.</a></li><li><a href="http://google-opensource.blogspot.com/2011/11/introducing-closure-stylesheets.html"><strong>Introducing Closure Stylesheets</strong><br>Google releases Closure for Stylesheets. I haven't looked at it yet but I'm intrigued.</a></li><li><a href="http://tcorral.github.com/IM.js/"><strong>IM.js  Fast image comparison pixel to pixel.</strong><br>Uses canvas to do image comparison of multiple images.</a></li><li><a href="http://nerds.airbnb.com/box-shadows-are-expensive-to-paint"><strong>CSS box-shadow Can Slow Down Scrolling</strong><br>The folks at airbnb examine the performance cost of box-shadow.</a></li></ul>
		</div></div>
		<div id="twitterfaves"><div class="shell">
			<h2>Twitter Faves</h2>
			<ul class="twitterfaves">
<li><a href="http://twitter.com/arpit/statuses/107672269437927424"><strong>arpit</strong> Flash flood warnings? When do we get HTML5 flood warnings?</a></li><li><a href="http://twitter.com/desandro/statuses/105371678204366848"><strong>desandro</strong> Describing a dev problem is like showing a picture of your car to a mechanic. If you want me to fix it, I need to put my own hands on it.</a></li><li><a href="http://twitter.com/nzkoz/statuses/103586257833177088"><strong>nzkoz</strong> The best part about releasing software is how everyone hates you</a></li><li><a href="http://twitter.com/sentience/statuses/96085537760354304"><strong>sentience</strong> That special anger you get when someone complains that the example.com links in your article don’t work? That.</a></li></ul>
		</div></div>
		<div id="flickrfaves"><div class="shell">
			<h2>Flickr Faves</h2>
			<ul class="flickrfaves">
<li><a href="http://www.flickr.com/photos/95572727@N00/4321052153"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/4321052153_4ba896b119_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/61471774@N00/6071129763"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/6071129763_0d3f2aff19_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/31846825@N04/5511618303"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/5511618303_d60fdbf905_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/30285142@N07/3233686653"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/3233686653_37da07e673_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/49503002894@N01/5493061081"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/5493061081_967f657d17_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/45716533@N00/5461220945"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/5461220945_fc47b46d87_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/53069962@N04/5451171007"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/5451171007_40492d0c56_s.jpg" alt=""></a></li><li><a href="http://www.flickr.com/photos/55717351@N00/5448758235"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/5448758235_cbd41eec58_s.jpg" alt=""></a></li></ul>
		</div></div>
		<div id="copyright"><div class="shell">
			<p>© Jonathan Snook</p>
			<p class="social">Find me on 
				<a href="http://twitter.com/snookca"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/twitter_16.png" alt="Twitter"></a>
				<a href="http://www.linkedin.com/in/jonathansnook"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/linkedin_16.png" alt="LinkedIn"></a>	
				<a href="http://www.flickr.com/photos/jonathansnook/"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/flickr_16.png" alt="Flickr"></a>
				<a href="http://delicious.com/gr66nman"><img src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/delicious_16.png" alt="Delicious"></a>
				</p>
		</div></div>
	</div>
	<script src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/snook-v10.js"></script>
	<script src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/ga.js"></script> 
	 <script> _gat._getTracker("UA-50611-1")._trackPageview(); </script>	
<script src="./JavaScript  Passing by Value or by Reference - Snook.ca_files/track.js" id="gauges-tracker" data-site-id="4d5fe2ff87fda5742b000002">
</script>



</body></html>