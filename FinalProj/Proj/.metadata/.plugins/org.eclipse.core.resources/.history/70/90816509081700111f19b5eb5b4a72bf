<html>

<head>
<title>Learning WebGL &mdash; lesson 1</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="Vector.js"></script>
<script type="text/javascript" src="Grids.js"></script>
<script type="text/javascript" src="Cam.js"></script>
<script type="text/javascript" src="InputHelper.js"></script>
<script id="shader-fs" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    void main(void) {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
    }
</script>


<script type="text/javascript">

    var N;
    var Cam;
    var gl;
    var center;
    var shaderProgram;
    var grid;
    var InputHelper;

    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

    function initShaders(gl) {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }


    function update() {
        requestAnimFrame(update);

        Cam.Update(shaderProgram);

        
        grid.Update(shaderProgram);
        grid.Draw();
    }

    

    function Initialize(canvas) {

        this.N = 2;
        this.Cam = new Cam();
        this.gl;
        this.center = new Vector3D(0, 0, 0);
        this.shaderProgram;

        this.grid = new Grids("colocate", N, center);



        gl = canvas.getContext("experimental-webgl");
        initShaders(gl);

        try {
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
        Cam.Initialize(gl);
        grid.Initialize(gl);
    }


    function webGLStart() {
        var canvas = document.getElementById("lesson01-canvas");
       
        Initialize(canvas);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
        this.InputHelper = new InputHelper(canvas);

        update();
    }


</script>


</head>


<body onload="webGLStart();">

    <canvas id="lesson01-canvas" style="border: none;" width="500" height="500"></canvas>

    <FORM NAME = frmOne>

            MouseX: <INPUT TYPE = Text NAME = mouseX SIZE = 5 value ="">
            MouseY: <INPUT TYPE = Text NAME = mouseY SIZE = 5 value ="">
            
            MouseState: <INPUT TYPE = Text NAME = mouseY SIZE = 5 value ="">

</FORM>
</body>

</html>
